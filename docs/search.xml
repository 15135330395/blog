<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[11运维常用命令]]></title>
    <url>%2Fdocs%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F11%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10服务器设计]]></title>
    <url>%2Fdocs%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F10%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[总体设计详细设计mysql集群实施安装最小版 纯净 配置网络 设为静态IP 修改主机名 由于常用工具都没安装，因此需要vim、net-tools、wget、iptables-services、gcc yum install -y 软件 安装 yum check-update 查看可更新的软件 yum update 软件 更新指定软件 安装配置java、tomcat、mysql、nginx、redis、fastdfs 关闭selinux 配置防火墙（建议关闭firewall 启动iptables CentOS7默认开启firewall）]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>服务器设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[09docker]]></title>
    <url>%2Fdocs%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F09docker%2F</url>
    <content type="text"><![CDATA[简介和虚拟机的区别https://blog.csdn.net/jingzhunbiancheng/article/details/80994909 安装使用命令常用应用的整合javatomcatmysqlredisHDFS]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[08nginx集群]]></title>
    <url>%2Fdocs%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F08nginx%E9%9B%86%E7%BE%A4%2F</url>
    <content type="text"><![CDATA[nginx是一款高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。官方测试nginx能够支支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定。 常见反向代理服务器： Nginx、lvs、F5（硬件）、haproxy 应用场景： 1、http服务器。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。 2、虚拟主机。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。 3、反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。 优点： 占内存小，可以实现高并发连接、处理响应快。 可以实现http服务器、虚拟主机、反向代理、负载均衡。 nginx配置简单 可以不暴露真实服务器IP地址 1.安装在Centos下，yum源不提供nginx的安装，可以通过切换yum源的方法获取安装。也可以通过直接下载安装包的方法，以下命令均需root权限执行： 首先安装必要的库（nginx 中gzip模块需要 zlib 库，rewrite模块需要 pcre 库，ssl 功能需要openssl库） yum list installed | grep zlib yum list installed | grep pcre yum list installed | grep openssl （最小版都装上了） 新增yum源 12345678vim /etc/yum.repos.d/nginx.repo新增[nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=0enabled=1保存 yum install nginx 2.配置和常用命令123456789101112131415161718192021222324252627服务systemctl enable nginx.servicesystemctl restart nginx.servicevim /etc/nginx/conf.d/default.confserver &#123; listen 80; server_name localhost; location / &#123; root /usr/share/nginx/html; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root /usr/share/nginx/html; &#125;&#125;启动服务器nginx -c /etc/nginx/nginx.conf关闭服务器nginx -s quit检测配置文件nginx -t重启服务器/重新加载配置文件./nginx -s reload 3.反向代理启动两个 Tomcat 8080 8081 修改配置文件 12345678910111213141516server &#123; listen 80; server_name 8080.localhost; location / &#123; proxy_pass http://127.0.0.1:8080; index index.html index.htm; &#125;&#125;server &#123; listen 80; server_name 8081.localhost; location / &#123; proxy_pass http://127.0.0.1:8081; index index.html index.htm; &#125;&#125; ./nginx -s reload 4.负载均衡1.轮询（默认）每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。upstream backserver {server 192.168.0.14;server 192.168.0.15;} 2.指定权重指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。upstream backserver {server 192.168.0.14weight=10;server 192.168.0.15weight=10;} 3.IP绑定 ip_hash每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。upstream backserver {ip_hash;server 192.168.0.14:88;server 192.168.0.15:80;} 高并发解决方案业务数据库 -》 数据水平分割(分区分表分库)、读写分离 业务应用 -》 逻辑代码优化(算法优化)、公共数据缓存 应用服务器 -》 反向静态代理、配置优化、负载均衡(apache分发，多tomcat实例) 系统环境 -》 JVM调优 页面优化 -》 减少页面连接数、页面尺寸瘦身 1、动态资源和静态资源分离； 2、CDN； 3、负载均衡； 4、分布式缓存； 5、数据库读写分离或数据切分（垂直或水平）； 6、服务分布式部署。]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>nginx集群</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[07mysql集群和mycat]]></title>
    <url>%2Fdocs%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F07mysql%E9%9B%86%E7%BE%A4%E5%92%8Cmycat%2F</url>
    <content type="text"><![CDATA[mysql 集群主从复制（自带）方式有多种：基于基于日志（binlog）的主从复制方式、 原理 Master将数据改变记录到二进制日志(binary log)中，也就是配置文件log-bin指定的文件，这些记录叫做二进制日志事件(binary log events)； Slave 通过 I/O 线程读取 Master 中的 binary log events 并写入到它的中继日志(relay log)； Slave 重做中继日志中的事件， 把中继日志中的事件信息一条一条的在本地执行一次，完成数据在本地的存储， 从而实现将改变反映到它自己的数据(数据重放)。 主从配置需要注意的点 主从服务器操作系统版本和位数一致； Master 和 Slave 数据库的版本要一致； Master 和 Slave 数据库中的数据要一致； Master 开启二进制日志， Master 和 Slave 的 server_id 在局域网内必须唯一； 步骤： Master配置 安装数据库； 修改数据库配置文件， 指明 server_id， 开启二进制日志(log-bin)； vim /etc/my.cnf [mysqld] skip-name-resolvelog-bin=mysql-binlog_timestamps=SYSTEMserver-id=111 启动数据库， 查看当前是哪个日志， position 号是多少； SHOW MASTER STATUS; show variables like ‘server_id’; set global server_id=111; #此处的数值和my.cnf里设置的一样就行 登录数据库， 授权数据复制用户（IP 地址为从机 IP 地址， 如果是双向主从， 这里的还需要授权本机的 IP 址， 此时自己的 IP 地址就是从 IP 地址)； 备份数据库（记得加锁和解锁）； 传送备份数据到 Slave 上； 启动数据库； 主机查看从机 show slave hosts; Slave 上的配置 安装数据库 （如果服务器完全复制 需要删掉/var/lib/mysql/auto.cnf文件并重启mysql 重新生成mysql的uuid） 修改数据库配置文件， 指明 server_id（如果是搭建双向主从的话， 也要开启二进制日志 log-bin）； vim /etc/my.cnf [mysqld]log-bin=mysql-binlog_timestamps=SYSTEMserver-id=112 show variables like ‘server_id’;log_timestamps=SYSTEMset global server_id=112; #此处的数值和my.cnf里设置的一样就行 启动数据库， 还原备份； 查看当前是哪个日志， position 号是多少（单向主从此步不需要， 双向主从需要）； SHOW MASTER STATUS; 指定 Master 的地址、 用户、 密码等信息；（show的内容） CHANGE MASTER TOMASTER_HOST=’192.168.1.111’,MASTER_USER=’root’,MASTER_PASSWORD=’Root123.’,MASTER_LOG_FILE=’mysql-bin.000001’,MASTER_LOG_POS=155; 开启同步， 查看状态。show slave status\G;start slave;show slave status\G; 确保Slave_IO_Running=Yes Slave_SQL_Running=Yes 否则重新配置从服务器配置文件（或查看上次错误原因Last_IO_Error） 读写分离（mysql-proxy 第三方）1.配置文件 vim /etc/my.cnf 主 12345678[mysqld]log-bin=mysql-bin #从库会基于此log-bin来做复制binlog-do-db=mytest #用于读写分离的具体数据库，这里我创建了mytest作测试binlog_ignore_db=mysql #不用于读写分离的具体数据库binlog_ignore_db=information_schema #和binlog-do-db一样，可以设置多个#选择row模式 binlog-format=ROWserver-id=1 从 123456[mysqld]log-bin=mysql-bin #从库会基于此log-bin来做复制replicate-do-db=mytest #用于读写分离的具体数据库，这里我创建了mytest作测试#选择row模式 binlog-format=ROWserver-id=2 2.mysql-proxy是官方提供的mysql中间件产品可以实现负载平衡，读写分离（配多个 防止单点失效） 下载 mysql-proxy-并安装 创建配置文件 安装目录/bin/mysql-proxy.conf 123456789101112131415161718[mysql-proxy]#用于中间件连接的用户admin-username=rootadmin-password=root#根据存放的文件位置自行调整admin-lua-script=C:/mysql-proxy-0.8.5-windows-x86-32bit/lib/mysql-proxy/lua/admin.lua #主库服务器+端口proxy-backend-addresses=192.168.103.207:3307#从库服务器+端口，多个从库用，隔开proxy-read-only-backend-addresses=192.168.103.208:3307#日志文件存放位置，如果你指定了一个路径，请确保手动创建了对应的文件夹，否则会报错log-file=C:/mysql-proxy-0.8.5-windows-x86-32bit/log/mysql-proxy.log#日志级别log-level=debug#以守护进程方式运行daemon=true#长连接keepalive=true 启动 1.\mysql-proxy.exe -P 192.168.103.203:6217 --defaults-file=mysql-proxy.conf 3.下载Atlas会有两个版本，其中有个分表的版本，但是这个需要其他的依赖，我这边不需要分表这种需求，所以安装普通的版本 ​ Atlas (普通) : Atlas-2.2.1.el6.x86_64.rpm ​ Atlas (分表) : Atlas-sharding_1.0.1-el6.x86_64.rpm 下载并安装 /usr/local/mysql-proxy/里有4个文件夹（bin conf lib log） bin目录下放的都是可执行文件 \1. “encrypt”是用来生成MySQL密码加密的，在配置的时候会用到 \2. “mysql-proxy”是MySQL自己的读写分离代理 \3. “mysql-proxyd”是360弄出来的，后面有个“d”，服务的启动、重启、停止。都是用他来执行的 conf目录下放的是配置文件 \1. “test.cnf”只有一个文件，用来配置代理的，可以使用vim来编辑 进入bin目录，使用encrypt来对数据库的密码进行加密，我的MySQL数据的用户名是buck，密码是hello，我需要对密码进行加密 1./encrypt hello 配置Atlas，使用vim进行编辑 vim test.cnf 12345678910111213141516171819#管理接口的用户名admin-username = user#管理接口的密码admin-password = pwd#Atlas后端连接的MySQL主库的IP和端口，可设置多项，用逗号分隔proxy-backend-addresses = 192.168.246.134:3306#Atlas后端连接的MySQL从库的IP和端口，@后面的数字代表权重，用来作负载均衡，若省略则默认为1，可设置多项，用逗号分隔proxy-read-only-backend-addresses = 192.168.246.135:3306@1#用户名与其对应的加密过的MySQL密码，密码使用PREFIX/bin目录下的加密程序encrypt加密，下行的user1和user2为示例，将其替换为你的MySQL的用户名和加密密码！pwds = buck:RePBqJ+5gI4=#Atlas监听的工作接口IP和端口proxy-address = 0.0.0.0:1234#Atlas监听的管理接口IP和端口（还可以指定IP，其他的IP无法访问管理员的命令界面）admin-address = 0.0.0.0:2345 启动 1./mysql-proxyd test start 确定mysql本身进不去 12/etc/init.d/mysqld statusmysql Atlas的管理模式能进去 它会把自己当成一个MySQL数据库mysql -h127.0.0.1 -P2345 -uuser -ppwd 12查看功能select * from help; 通过工作接口来访问 mysql -h127.0.0.1 -P1234 -ubuck -phello 可以让数据库某一台down掉，来测试监控的可用性 select * from backends; 读写分离测试这里测试读写分离需要使用到Jmeter了，它是Java写第一套开源的压力测试工具，因为这个比较方便。他有专门测试MySQL的模块，需要使用MySQL的JDBC驱动jar包，配置很简单，东西很好很强大很好用。 Jmeter下载地址：http://jmeter.apache.org/download_jmeter.cgi MySQL的JDBC ：http://dev.mysql.com/downloads/connector/j/ mycat集群（第三方）简介支持JDBC连接ORACLE、DB2、SQL Server，将其模拟为MySQL Server使用 1、Schema：逻辑库，与MySQL中的Database（数据库）对应，一个逻辑库中定义了所包括的Table。 2、Table：表，即物理数据库中存储的某一张表，与传统数据库不同，这里的表格需要声明其所存储的逻辑数据节点DataNode。在此可以指定表的分片规则。 3、DataNode：MyCAT的逻辑数据节点，是存放table的具体物理节点，也称之为分片节点，通过DataSource来关联到后端某个具体数据库上 4、DataSource：定义某个物理库的访问地址，用于捆绑到Datanode上 数据切分介绍垂直分割（不同表在不同数据库） 优点： 拆分后业务清晰，拆分规则明确。 系统之间整合或扩展容易。 数据维护简单。 缺点： 部分业务表无法join，只能通过接口方式解决，提高了系统复杂度。 受每种业务不同的限制存在单库性能瓶颈，不易数据扩展跟性能提高。 事务处理复杂。 由于垂直切分是按照业务的分类将表分散到不同的库，所以有些业务表会过于庞大，存在单库读写与存储瓶颈，所以就需要水平 拆分来做解决。 水平分割（数据量） 几种典型的分片规则包括： 按照用户ID求模，将数据分散到不同的数据库，具有相同数据用户的数据都被分散到一个库中。 按照日期，将不同月甚至日的数据分散到不同的库中。 按照某个特定的字段求摸，或者根据特定范围段分散到不同的库中。 优点有： 拆分规则抽象好，join操作基本可以数据库做。 不存在单库大数据，高并发的性能瓶颈。 应用端改造较少。 提高了系统的稳定性跟负载能力。 缺点有： 拆分规则难以抽象。 分片事务一致性难以解决。 数据多次扩展难度跟维护量极大。 跨库join性能较差。 前面讲了垂直切分跟水平切分的不同跟优缺点，会发现每种切分方式都有缺点，但共同的特点缺点有： 引入分布式事务的问题。 跨节点Join的问题。 跨节点合并排序分页问题。 多数据源管理问题。安装 官方网站： http://www.mycat.org.cn/ github地址 https://github.com/MyCATApache 下载后解压 12cd /usr/mycattar -zxvf Mycat-server-1.6.7.3-release-20190828135747-linux.tar.gz 启动命令：./mycat start 停止命令：./mycat stop 重启命令：./mycat restart 注意：可以使用mysql的客户端直接连接mycat服务。默认服务端口为8066 1mysql -uroot -p -P8066 -h127.0.0.1 -default_auth=mysql_native_password（因为连的mysql8 不写-default_auth会报密码错误 -h必须写上并加上IP） –bin 启动目录–conf 配置文件存放配置文件–lib MyCAT自身的jar包或依赖的jar包的存放目录。–logs MyCAT日志的存放目录。日志存放在logs/log中，每天一个文件 配置由于mycat不支持mysql8.0，所以需要将mysql8.0配置成5.x 1.修改加密规则 在mysql8之前的版本使用的密码加密规则是mysql_native_password，但是在mysql8则是caching_sha2_password。 12345use mysql;select user,host,plugin from user;update user set plugin=&apos;mysql_native_password&apos; where User=&apos;root&apos;;#修改加密规则ALTER USER &apos;root&apos;@&apos;localhost&apos; BY &apos;Root123.&apos;;#更新一下用户的密码FLUSH PRIVILEGES; #刷新权限 2.如果是在Linux平台，在首次启动前设置lower_case_table_names = 1（表名大小写不敏感），需要删除数据（不知道需不需要） 123456systemctl stop mysqld.servicerm -rf /var/lib/mysqlvim /etc/my.cnflower_case_table_names=1保存systemctl restart mysqld.service https://blog.csdn.net/jaysonhu/article/details/52858535 配置schema.xml管理着MyCat的逻辑库、表、分片规则、DataNode以及DataSource 是逻辑库定义和表以及分片定义的配置文件。 数据库8.0 所以需要替换jdbc驱动包和连接方式 123456789#删除mycat/lib下的mysql5.x驱动包（不删 可能也行）cd /usr/mycat/mycat/ligrm mysql-connector-java-5.1.35.jar放入mysql8.0驱动包 mysql-connector-java-8.0.17.jar对文件赋权限chmod 777 mysql-connector-java-8.0.17.jar如果mysql unblock with ‘mysqladmin flush-hosts’解决方法登陆mysql -u root -p 后执行命令 flush hosts; vim schema.xml 12345678910111213141516171819202122232425262728293031&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;&lt;mycat:schema xmlns:mycat=&quot;http://org.opencloudb/&quot;&gt;&lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot;&gt;&lt;!-- auto sharding by id (long) --&gt; &lt;table name=&quot;TB_ITEM&quot; dataNode=&quot;dn1,dn2,dn3&quot; rule=&quot;auto-sharding-long&quot; /&gt; &lt;table name=&quot;TB_USER&quot; primaryKey=&quot;ID&quot; type=&quot;global&quot; dataNode=&quot;dn1,dn2&quot; /&gt; &lt;/schema&gt; &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;db1&quot; /&gt; &lt;dataNode name=&quot;dn2&quot; dataHost=&quot;localhost2&quot; database=&quot;db2&quot; /&gt; &lt;dataNode name=&quot;dn3&quot; dataHost=&quot;localhost1&quot; database=&quot;db3&quot; /&gt; &lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;#native#改成jdbc&quot; switchType=&quot;1&quot; slaveThreshold=&quot;100&quot;&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;!-- can have multi write hosts --&gt; &lt;writeHost host=&quot;hostM1&quot; url=&quot;#192.168.1.111:3306#改成jdbc:mysql://192.168.1.111:3306?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF8&amp;amp;serverTimezone=UTC&quot; user=&quot;root&quot; password=&quot;root&quot;&gt; &lt;!-- can have multi read hosts --&gt; &lt;/writeHost&gt; &lt;/dataHost&gt; &lt;dataHost name=&quot;localhost2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot; slaveThreshold=&quot;100&quot;&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;!-- can have multi write hosts --&gt; &lt;writeHost host=&quot;hostM1&quot; url=&quot;192.168.25.166:3306&quot; user=&quot;root&quot; password=&quot;root&quot;&gt; &lt;!-- can have multi read hosts --&gt; &lt;/writeHost&gt; &lt;/dataHost&gt;&lt;/mycat:schema&gt; 配置server.xml保存了所有mycat需要的系统配置信息 是Mycat服务器参数调整和用户授权的配置文件。 1234567&lt;user name=&quot;test&quot;&gt; &lt;property name=&quot;password&quot;&gt;test&lt;/property&gt; &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt; &lt;property name=&quot;readOnly&quot;&gt;true&lt;/property&gt;&lt;/user&gt; 123456mysql -uroot -p -P8066 -h127.0.0.1 -default_auth=mysql_native_password数据系统mysql -uroot -p -P9066 -h127.0.0.1 -default_auth=mysql_native_password管理系统常用命令show @@help; 配置rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改需要重启MyCAT。 rule.xml里面就定义了我们对表进行拆分所涉及到的规则定义，可以灵活的对表使用不同的分片算法，或者对表使用相同的算法但具体的参数不同。这个文件里面主要有tableRule和function这两个标签。在具体使用过程中可以按照需求添加tableRule和function。可以不做修改，使用默认配置 配置log4j.xml日志存放在logs/log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要可以调整输出级别为debug debug级别下，会输出更多的信息，方便排查问题。 autopartition-long.txt,partition-hash-int.txt,sequence_conf.properties， sequence_db_conf.properties 分片相关的id分片规则配置文件 测试分片创建表并插入数据 由于配置的分片规则为“auto-sharding-long”，所以mycat会根据此规则自动分片。 每个datanode中保存一定数量的数据。根据id进行分片 经测试id范围为： Datanode1：1~5000000 Datanode2：5000000~10000000 Datanode3：10000001~15000000 当15000000以上的id插入时报错： [Err] 1064 - can’t find any valid datanode :TB_ITEM -&gt; ID -&gt; 15000001 此时需要添加节点了。 主从复制（同上） 读写分离 Mycat 1.4 支持MySQL主从复制状态绑定的读写分离机制，让读更加安全可靠，配置如下： 123456789101112&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;db1&quot; /&gt; &lt;dataNode name=&quot;dn2&quot; dataHost=&quot;localhost1&quot; database=&quot;db2&quot; /&gt; &lt;dataNode name=&quot;dn3&quot; dataHost=&quot;localhost1&quot; database=&quot;db3&quot; /&gt; &lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;2&quot; slaveThreshold=&quot;100&quot;&gt; &lt;heartbeat&gt;show slave status&lt;/heartbeat&gt; &lt;writeHost host=&quot;hostM&quot; url=&quot;192.168.25.134:3306&quot; user=&quot;root&quot; password=&quot;root&quot;&gt; &lt;readHost host=&quot;hostS&quot; url=&quot;192.168.25.166:3306&quot; user=&quot;root&quot; password=&quot;root&quot; /&gt; &lt;/writeHost&gt; &lt;/dataHost&gt; (1) 设置 balance=”1”与writeType=”0” Balance参数设置： \1. balance=“0”, 所有读操作都发送到当前可用的writeHost上。 \2. balance=“1”，所有读操作都随机的发送到readHost。 \3. balance=“2”，所有读操作都随机的在writeHost、readhost上分发 WriteType参数设置： \1. writeType=“0”, 所有写操作都发送到可用的writeHost上。 \2. writeType=“1”，所有写操作都随机的发送到readHost。 \3. writeType=“2”，所有写操作都随机的在writeHost、readhost分上发。 “readHost是从属于writeHost的，即意味着它从那个writeHost获取同步数据，因此，当它所属的writeHost宕机了，则它也不会再参与到读写分离中来，即“不工作了”，这是因为此时，它的数据已经“不可靠”了。基于这个考虑，目前mycat 1.3和1.4版本中，若想支持MySQL一主一从的标准配置，并且在主节点宕机的情况下，从节点还能读取数据，则需要在Mycat里配置为两个writeHost并设置banlance=1。” (2) 设置 switchType=”2” 与slaveThreshold=”100” switchType 目前有三种选择： -1**：表示不自动切换** 1 ：默认值，自动切换 2 ：基于MySQL主从同步的状态决定是否切换 “Mycat心跳检查语句配置为 show slave status ，dataHost 上定义两个新属性： switchType=”2” 与slaveThreshold=”100”，此时意味着开启MySQL主从复制状态绑定的读写分离与切换机制。Mycat心跳机制通过检测 show slave status 中的 “Seconds_Behind_Master”, “Slave_IO_Running”, “Slave_SQL_Running” 三个字段来确定当前主从同步的状态以及Seconds_Behind_Master主从复制时延。“ 监控平台emmm… 需要用到zookeeper 目前被监控的MySQL版本支持5.7（推荐），5.6。 而且还不支持8.0。。。有点尴尬 MyCAT自增字段和返回生成的主键ID的经验分享MyCAT自增字段和返回生成的主键ID的经验分享说明：1、mysql本身对非自增长主键，使用last_insert_id()是不会返回结果的，只会返回0.2、mysql只会对定义自增长主键，可以用last_insert_id()返回主键值。 mycat目前提供了自增长主键功能，但是如果对应的mysql节点上数据表，没有定义auto_increment，那么在mycat层调用last_insert_id()也是不会返回结果的。正确使用方式如下：1、mysql定义自增主键CREATE TABLE tt2 ( id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT, nm INT(10) UNSIGNED NOT NULL, PRIMARY KEY (id)) ENGINE=MYISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;2、mycat定义自增[root@test conf]# vim schema.xml&lt;mycat:schema xmlns:mycat=”http://org.opencloudb/&quot;&gt; &lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot;&gt; &lt;!-- random sharding using mod sharind rule --&gt; &lt;!-- autoIncrement=&quot;true&quot; 属性--&gt; &lt;table name=&quot;tt2&quot; primaryKey=&quot;id&quot; autoIncrement=&quot;true&quot; dataNode=&quot;dn1,dn2,dn3,dn4,dn5&quot; rule=&quot;mod-long&quot; /&gt; &lt;table name=&quot;mycat_sequence&quot; primaryKey=&quot;name&quot; dataNode=&quot;dn1&quot;/&gt; &lt;/schema&gt; &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;db1&quot; /&gt; &lt;dataNode name=&quot;dn2&quot; dataHost=&quot;localhost1&quot; database=&quot;db2&quot; /&gt; &lt;dataNode name=&quot;dn3&quot; dataHost=&quot;localhost1&quot; database=&quot;db3&quot; /&gt; &lt;dataNode name=&quot;dn4&quot; dataHost=&quot;localhost1&quot; database=&quot;db4&quot; /&gt; &lt;dataNode name=&quot;dn5&quot; dataHost=&quot;localhost1&quot; database=&quot;db5&quot; /&gt; &lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;20&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;writeHost host=&quot;hostM1&quot; url=&quot;127.0.0.1:3366&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt; &lt;/writeHost&gt; &lt;/dataHost&gt; 3、mycat对应sequence_db_conf.properties增加相应设置；4、mycat的对应mycat_sequence增加对应记录。5、链接mycat，测试结果如下： 127.0.0.1/root:[TESTDB&gt; insert into tt2(nm) values (99);Query OK, 1 row affected (0.14 sec) 127.0.0.1/root:[TESTDB&gt; select last_insert_id();+——————+| LAST_INSERT_ID() |+——————+| 101 |+——————+1 row in set (0.01 sec) 127.0.0.1/root:[TESTDB&gt; insert into tt2(nm) values (99);Query OK, 1 row affected (0.00 sec) 127.0.0.1/root:[TESTDB&gt; select last_insert_id();+——————+| LAST_INSERT_ID() |+——————+| 102 |+——————+1 row in set (0.00 sec) 127.0.0.1/root:[TESTDB&gt; insert into tt2(nm) values (99);Query OK, 1 row affected (0.00 sec) 127.0.0.1/root:[TESTDB&gt; select last_insert_id();+——————+| LAST_INSERT_ID() |+——————+| 103 |+——————+1 row in set (0.00 sec) 127.0.0.1/root:[TESTDB&gt; insert into tt2(nm) values (99);Query OK, 1 row affected (0.01 sec) 127.0.0.1/root:[TESTDB&gt; select last_insert_id();+——————+| LAST_INSERT_ID() |+——————+| 104 |+——————+1 row in set (0.00 sec) 127.0.0.1/root:[TESTDB&gt; insert into tt2(nm) values (99);Query OK, 1 row affected (0.00 sec) 127.0.0.1/root:[TESTDB&gt; select last_insert_id();+——————+| LAST_INSERT_ID() |+——————+| 105 |+——————+1 row in set (0.00 sec) 127.0.0.1/root:[TESTDB&gt; insert into tt2(nm) values (99);Query OK, 1 row affected (0.00 sec) 127.0.0.1/root:[TESTDB&gt; select last_insert_id();+——————+| LAST_INSERT_ID() |+——————+| 106 |+——————+1 row in set (0.00 sec)]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>mysql集群</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[06go-fastDFS及FastDFS、HDFS]]></title>
    <url>%2Fdocs%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F06go-fastDFS%E5%8F%8AFastDFS%E3%80%81HDFS%2F</url>
    <content type="text"><![CDATA[Go-fastDFSgithub：https://github.com/sjqzhang/go-fastdfs 搭配nginx使用 1.linux安装 1wget --no-check-certificate https://github.com/sjqzhang/go-fastdfs/releases/download/v1.3.1/fileserver -O fileserver &amp;&amp; chmod +x fileserver &amp;&amp; ./fileserver 2.运行 1./fileserver 3.配置 vim conf/cfg.json（一个配置文件 全部搞定） fastDFS用c语言编写的一款开源的分布式文件系统，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，适用于小文件存储 1.有两个角色，tracker server（追踪服务器 负载均衡和调度）和storage server（存储服务器 文件存储）2.所有服务器都是对等的，不存在Master-Slave 关系 （master有可能单点故障问题，而且 client 与 master 之间可能会出现瓶颈）3.存储服务器采用分组方式，同组内存储服务器上的文件完全相同（RAID 1）4.不同组的storage server之间不会相互通信，同组storage server之间会相互连接进行文件同步5.由storage server主动向tracker server报告状态信息，tracker server之间通常不会相互通信6.客户端请求Tracker server进行文件上传、下载，通过Tracker server调度最终由Storage server以HTTP方式完成文件上传和下载 7.客户端请求Tracker server采用轮询方式，如果请求的tracker无法提供服务则换另一个tracker 8.storage集群由一个或多个组构成，集群存储总容量为集群中所有组的存储容量之和，单个组的容量是组内容量最小的服务器 安装1.FastDFS依赖libevent库，需要安装： yum list installed |grep libevent yum -y install libevent 2.下载libfastcommon源包 解压 shell脚本安装 https://github.com/happyfish100/libfastcommon.git 123456cd /usr/fastdfs/libfastcommontar -zxvf libfastcommon-1.0.39.tar.gzcd libfastcommon-1.0.39./make.sh./make.sh install安装完成后/usr/lib64有libfastcommon.so文件 3.安装源包 解压 shell脚本安装 https://github.com/happyfish100/fastdfs 12345cd /usr/fastdfstar -zxvf fastdfs-5.11.tar.gzcd fastdfs-5.11./make.sh./make.sh install 配置Client.conf 客户端上传配置文件Storage.conf 文件存储服务器配置文件Tracker.conf 负责均衡调度服务器配置文件http.conf http服务器配置文件 tracker服务器： 12345678910111213141516171819202122232425262728293031323334cd /etc/fdfscp tracker.conf.sample tracker.conf修改tracker.confvim tracker.confbase_path=/home/yuqing/fastdfs改为：（22行）base_path=/home/fastdfs#配置是否生效 false是生效disabled=false#绑定IPbind_addr=#服务端口port=22122#上传文件的选组方式 0轮询 1指定组 2存储负载均衡（选择剩余空间最大的组）store_lookup=2#当store_lookup=1且应用层不指定时才生效store_group=group2#下载文件的端口http.server_port=8080 #http端口（fastdfs5.05以后已经没用了）（内容很多 根据需求改）在home文件夹中创建fastdfs文件夹mkdir /home/fastdfs启动：/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart查看netstat -unltp|grep fdfs日志tail -100f /home/fastdfs/logs/trackerd.log将tracker的启动添加到服务器的开机启动中:vim /etc/rc.d/rc.local添加/usr/bin/fdfs trackerd /etc/fdfs/tracker.conf restart保存 storage服务器： 123456789101112131415161718192021222324252627282930313233cd /etc/fdfscp storage.conf.sample storage.conf修改storage.confvim storage.confgroup_name=group1port=23001 #服务端口 （同组的storage端口号必须一致）base_path=/home/yuqing/FastDFS改为：base_path=/home/fastdfsstore_path_count=1 #存储路径个数 需要和store_path个数匹配store_path0=/home/yuqing/FastDFS改为：store_path0=/home/fastdfs/fdfs_storage#如果有多个挂载磁盘则定义多个store_path#store_path1=.....#store_path2=......tracker_server=192.168.1.111:22122 #配置tracker服务器:IP#如果有多个则配置多个trackertracker_server=192.168.1.222:22122http.server_port=8080 #http端口 （fastdfs5.05以后已经没用了）在home文件夹中创建fastdfs和fdfs_storage文件夹mkdir -p /home/fastdfs/fdfs_storage启动/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart查看netstat -unltp|grep fdfs日志tail -100f /opt/fastdfs_storage_info/logs/storage.log启动成功后，可以通过fdfs monito值看集群的情况，即storage是否已经注册到tracker服务器中/usr/bin/fdfs_monitor /etc/fdfs/storage.conf查看192.168.224.29:23001（storage服务器IP）是ACTIVE状态即可如果启动没有问题，可以通过以下步骤，将storage的启动添加到服务器的开机启动中:vim /etc/rc.d/rc.local添加/usr/bin/fdfs_ storage /etc/fdfs/storage.conf restart保存 测试12345678910111213141516FastDFS安装成功可通过/usr/bin/fdfs_test测试上传、下载等操作。修改/etc/fdfs/client.confbase_path=/home/fastdfstracker_server=192.168.101.3:22122使用格式：/usr/bin/fdfs_test 客户端配置文件地址 upload 上传文件比如将/home下的图片上传到FastDFS中：/usr/bin/fdfs_test /etc/fdfs/client.conf upload /home/tomcat.png（需要Nginx服务器提供http访问服务 同时可以解决group中storage服务器的同步延迟问题）http://192.168.101.3/group1/M00/00/00/wKhlBVVY2M-AM_9DAAAT7-0xdqM485_big.png就是文件的下载路径。对应storage服务器上的/home/fastdfs/fdfs_storage/data/00/00/wKhlBVVY2M-AM_9DAAAT7-0xdqM485_big.png文件。 JAVA测试123456789101112131415161718192021222324252627282930313233343536373839404142434445public class FastdfsClientTest &#123; //客户端配置文件 public String conf_filename = &quot;F:fastdfsClient\\fdfs_client.conf&quot;; //本地文件，要上传的文件 public String local_filename = &quot;F:\\upload\\test.xlsx&quot;; //上传文件 @Test public void testUpload() &#123; for(int i=0;i&lt;100;i++)&#123; try &#123; ClientGlobal.init(conf_filename); TrackerClient tracker = new TrackerClient(); TrackerServer trackerServer = tracker.getConnection(); StorageServer storageServer = null; StorageClient storageClient = new StorageClient(trackerServer, storageServer); NameValuePair nvp [] = new NameValuePair[]&#123; new NameValuePair(&quot;item_id&quot;, &quot;100010&quot;), new NameValuePair(&quot;width&quot;, &quot;80&quot;), new NameValuePair(&quot;height&quot;, &quot;90&quot;) &#125;; String fileIds[] = storageClient.upload_file(local_filename, null, nvp); System.out.println(fileIds.length); System.out.println(&quot;组名：&quot; + fileIds[0]); System.out.println(&quot;路径: &quot; + fileIds[1]); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125; Nginx整合参考资料：http://blog.csdn.net/lynnlovemin/article/details/39398043 fastdfs集群的配置教程http://blog.csdn.net/poechant/article/details/6977407 fastdfs系列教程http://m.blog.csdn.net/blog/hfty290/42030339 tracker-leader的选举 为fastDFS提供http访问服务 同时可以解决group中storage服务器的同步延迟问题 在tracker上安装nginx在每个tracker上安装nginx，主要目的是做负载均衡及实现高可用。如果只有一台tracker服务器可以不配置nginx 在Storage上安装nginx下载FastDFS-nginx-module 解压 cd /usr/local tar -zxvf FastDFS-nginx-module_v1.16.tar.gz cd FastDFS-nginx-module/src 修改config文件将/usr/local/路径改为/usr/ vim conf cp mod_FastDFS.conf /etc/fdfs/ 修改mod_FastDFS.conf的内容 vim /etc/fdfs/mod_FastDFS.conf base_path=/home/FastDFS tracker_server=192.168.101.3:22122 #tracker_server=192.168.101.4:22122（多个tracker配置多行） url_have_group_name=true #url中包含group名称 store_path0=/home/FastDFS/fdfs_storage #指定文件存储路径 将libfdfsclient.so拷贝至/usr/lib下 cp /usr/lib64/libfdfsclient.so /usr/lib/ 创建nginx/client目录 mkdir -p /var/temp/nginx/client 新建一个nginx配置文件nginx-fdfs.conf. 添加server: server { ​ listen 80; ​ server_name 192.168.101.3; ​ location /group1/M00/{ ​ #root /home/FastDFS/fdfs_storage/data; ​ ngx_fastdfs_module; ​ } } 说明： server_name指定本机ip location /group1/M00/：group1为nginx 服务FastDFS的分组名称，M00是FastDFS自动生成编号，对应store_path0=/home/FastDFS/fdfs_storage，如果FastDFS定义store_path1，这里就是M01 HDFS一个hdfs集群，由一台运行了namenode的服务器，和N台运行了datanode的服务器组成 优缺点HDFS优点： 高容错性 数据自动保存多个副本 副本丢失后，自动恢复 适合批处理 移动计算而非数据 数据位置暴露给计算框架 适合大数据处理 GB 、TB 、甚至PB 级数据 百万规模以上的文件数量 10K+ 节点 可构建在廉价机器上 通过多副本提高可靠性 提供了容错和恢复机制 HDFS缺点： 低延迟数据访问 比如毫秒级- 低延迟与高吞吐率 小文件存取 占用NameNode 大量内存 寻道时间超过读取时间 并发写入、文件随机修改 一个文件只能有一个写者 仅支持append 角色NameNode（NN）主要功能： 接受客户端的读写服务 NameNode保存metadate信息包括 文件owership和permissions 文件包含哪些块 Block保存在哪个DataNode（由DataNode启动时上报） NameNode的metadate信息在启动后会加载到内存 metadata存储到磁盘文件名为”fsimage” Block的位置信息不会保存到fsimage edits记录对metadata的操作日志 SecondaryNameNode（SNN）HA SNN 就没有了 它不是NN的备份（但可以做备份），它的主要工作是帮助NN合并edits log，减少NN启动时间。 SNN执行合并时机 根据配置文件设置的时间间隔fs.checkpoint.period 默认3600秒 根据配置文件设置edits log大小 fs.checkpoint.size 规定edits文件的最大值默 认是64MB DataNode（DN） 存储数据（Block） 启动DN线程的时候会向NN汇报block信息 通过向NN发送心跳保持与其联系（3秒一次），如果NN 10分钟没有收到DN的心跳，则认为其已经lost，并copy其上的block到其它DN Block的副本放置策略 第一个副本：放置在上传文件的DN；如果是集群外提交，则随机挑选一台磁盘不太满，CPU不太忙的节点。 第二个副本：放置在于第一个副本不同的机架的节点上。 第三个副本：与第二个副本相同机架的节点。 更多副本：随机节点 安装和配置 下载 上传hadoop安装包到node1 解压 ssh的免密码登陆 修改hadoop-env.sh vim hadoop-env.sh 修改JAVA_HOME 修改core-site.xml vim core-site.xml #配置默认采用的文件系统 + #（由于存储层和运算层松耦合，要为它们指定使用hadoop原生的分布式文件系统hdfs。value填入的是uri，参数是 分布式集群中主节点的地址 : 指定端口号） fs.defaultFS hdfs://node01:9000/ #配置hadoop的公共目录#（指定hadoop进程运行中产生的数据存放的工作目录，NameNode、DataNode等就在本地工作目录下建子目录存放数据。但事实上在生产系统里，NameNode、DataNode等进程都应单独配置目录，而且配置的应该是磁盘挂载点，以方便挂载更多的磁盘扩展容量） hadoop.tmp.dir /home/thousfeet/app/hadoop-3.0.0/data/ 修改hdfs-site.xml vim hdfs-site.xml #配置hdfs的副本数#（客户端将文件存到hdfs的时候，会存放在多个副本。value一般指定3，但如果搭建的是伪分布式就只有一台机器，所以只写1） dfs.replication 1 #指定namenode软件存放文件块的本地目录+ 指定datanode软件存放文件块的本地目录 dfs.namenode.name.dir /root/dfs/name ​ dfs.datanode.data.dir /root/dfs/data ​ 修改masters文件和slaves文件 格式化namenode 1hadoop namenode -format Start-hdfs.sh启动 要运行hadoop的命令，需要在linux环境中配置HADOOP_HOME和PATH环境变量 vim /etc/profile export JAVA_HOME=/usr/java/jdk1.8.export HADOOP_HOME=/安装目录export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin node1上启动 hadoop-daemon.sh start namenode 在windows上访问http://hdp-01:50070 启动众datanode们（在任意地方）hadoop-daemon.sh start datanode JAVA开发Configuration conf = new Configuration(); FileSystem fs = FileSystem.get(new URI(“hdfs://hdp-01:9000”),conf,”root”); 上传文件—— fs.copyFromLocalFile(new Path(“本地路径”),new Path(“hdfs的路径”)); 下载文件——fs.copyToLocalFile(new Path(“hdfs的路径”),new Path(“本地路径”)) 参考资料： 调用JAVA API 对 HDFS 进行文件的读取、写入、上传、下载、删除等操作https://blog.csdn.net/DF_XIAO/article/details/50601727java 实现对hdfs上文件的上传与下载https://blog.csdn.net/CSDN_Hzx/article/details/87861096]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>文件服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[05redis环境]]></title>
    <url>%2Fdocs%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F05redis%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[应用场景缓存（数据查询、短链接、新闻内容、商品内容等）（最多） 聊天室的在线好友列表 任务队列（秒杀、抢购、12306等） 应用排行榜 网站访问统计 数据过期处理（可以精确到毫秒） 分布式集群框架中的session分离 安装redis由C语言开发，安装redis需要先将官网下载的源码进行编译，编译依赖gcc环境。 1.安装gcc 123yum list installed | grep gccyum list | grep gccyum install gcc 2.解压redis压缩包 12cd /usr/soft/tar -zxvf redis-5.0.4.tar.gz 3.编译 12345cd redis-5.0.4make编译结束Hint: It&apos;s a good idea to run &apos;make test&apos; ;) 4.安装 1make install PREFIX=/usr/soft/redis 安装结束后，/usr/soft/redis/bin下有几个可执行文件 redis-benchmark——性能测试工具redis-check-aof——AOF文件修复工具redis-check-rdb——RDB文件检查工具（快照持久化工具）redis-cli——命令行客户端redis-sentinel（链接文件 到server）redis-server——redis服务器启动命令 5.配置文件 cp /usr/soft/redis/redis-5.0.4/redis.conf /usr/soft/redis/bin/redis.conf vim /usr/soft/redis/bin/redis.conf 123456#IP绑定 69行bind 192.168.1.111#是否开启保护模式，由yes该为no 88行protected-mode no#数据库的数量(默认是16个 相互隔离 但是可以使用flushall一次清空所有的库) 根据需求修改 186行databases 16 6.启动 前端模式启动（测试） 123/usr/redis/bin/redis-serverctrl+c结束 后端模式启动 12345678vim /usr/redis/bin/redis.conf#后端模式 136行daemonize yes保存./redis-server redis.conf./redis-cli shutdown——关闭./redis-cli -h 192.168.1.111 -p 6379 shutdown 存储结构及指令使用Redis支持类型1．String（字符串）命令： 增：set 键 字符串值 查询：GET 键 返回key对应字符串值的指定字符：GETRANGE 键 开始 结束（包含） 设置并返回旧值：GETSET 键 新值 获取/设置多个key：MGET 键1 键2 …./MSET 键1 值1 键2 值2 …. 当value为整数数据时，可以设为自增：INCR 键 / INCRBY 键 步长 自减：DECR 键 / DECR 键 步长 向键值的末尾追加value。如果键不存在则将该键的值设置为value，即相当于 SET key value。返回值是追加后字符串的总长度：APPEND 键 值 获得字符串长度 键不存在则返回0：STRLEN 键 2．Hash（哈希，key-value，适合存储对象 key是对象 value是属性 字段值只能是字符串类型）命令： 增：hmset 键 字段1 字段值1 字段2 字段值2 …. HSET 键 字段 字段值（只能设置一个字段值 不区分插入和更新操作 插入返回1 更新返回0） 删：HDEL 键 字段1 字段2 …. 查：HGET 键 字段 HMGET 键 字段1 字段2 ….（获取多个字段值） HGETALL 键（获取所有的字段和字段值） 判断字段是否存在：HEXISTS 键 字段 只获取字段名或字段值：HKEYS 键 / HVALS 键 获取字段数量：HLEN 键 3．List（列表 本质是双向链表）命令： 向列表左/右增加元素：lpush/RPUSH 键 值1 值2 …. 移出并获取列表的第一个/最后一个元素，等待时间设置为秒，阻塞：BLPOP/BRPOP 键 时间 求长度：LLEN 键 移出并获取列表的第一个/最后一个元素：LPOP/RPOP 键 查看列表：LRANGE 键 开始 结束 4．Set（集合，无序不重复）命令： 增：sadd 键 值1 值2 …. 获取数量：SCARD 键 获得所有元素：SMEMBERS 键 删除：SREM 键 值1 值2 …. 判断元素是否在集合中：SISMEMBER 键 值1 差集/交集/并集：SDIFF/SINTER/SUNION 键1 键2 返回并移除指定set中的随机某个元素：SPOP 键 5．zset(sorted set：有序值不重复 序/分数可以相同)命令： 增：zadd 键 序1 值 序2 值2 …. 获得有序集合数量：ZCARD 键 获得有序集合指定范围的从小到大的值：ZRANGE 键 开始 结束（包含） 获得有序集合指定范围的从大到小的值：ZREVRANGE 键 开始 结束（包含）WITHSCORES（获得分数） 获取元素的分数：ZSCORE 键 值 删除：ZREM 键 值1 值2 …. 通用： 删除键：DEL 键 键是否存在：EXISTS 键 查看所有满足条件的key：KEYS 键开头*（模板） 重命名：RENAME 旧键 新键 显示指定key的数据类型：type key 设置key的有效期，单位为seconds：EXPIRE 键 时间 删除key的有效期，变为永久有效：PERSIST 键 返回key的剩余有效时间，pttl返回毫秒，ttl返回秒：TTL/PTTL 键 事务 开启事务：MULTI 触发事务，提交：EXEC 取消事务，清除：DISCARD 当某个事务需要按条件执行时，就要使用这个命令将给定的键设置为受监控的状态：watch 键1 键2 ….（可以实现乐观锁） 清除所有先前为一个事务监控的键：unwatch Redis不支持事务回滚（？ 回滚：discard）1.大多数事务失败是因为语法错误或者类型错误，这两种错误，在开发阶段都是可以预见的（？ 如果出现异常 则忽略）2.为了性能方面就忽略了事务回滚 持久化Redis是一个内存数据库，为了保证数据的持久性，它提供了两种持久化方案: RDB方式（默认 通过快照完成的，当符合一定条件时Redis会自动将内存中的数据进行快照并持久化到硬盘） AOF方式 （每执行一条会更改Redis中的数据的命令，Redis就会将该命令写入硬盘中的AOF文件） RDB方式Redis会在指定的情况下触发快照1. 符合自定义配置的快照规则 2. 执行save或者bgsave命令 3. 执行flushall命令 4. 执行主从复制操作 在redis.conf中设置自定义快照规则save save 900 1：表示15分钟（900秒钟）内至少1个键被更改则进行快照 可以配置多个条件（每行配置一个条件），每个条件之间是“或”的关系 配置dir指定rdb快照文件的位置dir ./ 配置dbfilename指定rdb快照文件的名称dbfilename dump.rdb 优缺点缺点：一旦Redis异常退出，就会丢失最后一次快照以后更改的所有数据 优点：RDB可以最大化Redis的性能，保存时会分出子进程，但数据量大会耗时变缺点 AOF方式开启：redis.conf配置文件中的appendonly参数开启 appendonly yes 保存位置 dir ./ 默认的文件名 appendfilename appendonly.aof 主从复制和切换主从机主redis不需要配置 只需要修改从redis配置 修改从服务器上的redis.conf文件 1slaveof 主服务器IP 主服务器端口 只有从机第一次连接上主机是全量同步断线重连有可能触发全量同步也有可能是增量同步（master判断runid是否一致）除此之外的情况都是增量同步 Sentinel 哨兵进程监控redis集群中Master主服务器工作的状态 作用：监控 提醒 自动迁移（自动改变主从机的配置文件 以及 哨兵监控文件） 修改从机的sentinel.conf 12#sentinel monitor &lt;master-name&gt; &lt;master ip&gt; &lt;master port&gt; &lt;quorum&gt;sentinel monitor mymaster 192.168.10.133 6379 1 配置文件说明 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061# 哨兵sentinel实例运行的端口 默认26379port 26379# 哨兵sentinel的工作目录dir /tmp# 哨兵sentinel监控的redis主节点的 ip port # master-name 可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。# quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了# sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;sentinel monitor mymaster 127.0.0.1 6379 2# 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码# 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码# sentinel auth-pass &lt;master-name&gt; &lt;password&gt;sentinel auth-pass mymaster MySUPER--secret-0123passw0rd # 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒# sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;sentinel down-after-milliseconds mymaster 30000 # 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。# sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;sentinel parallel-syncs mymaster 1# 故障转移的超时时间 failover-timeout 可以用在以下这些方面： #1. 同一个sentinel对同一个master两次failover之间的间隔时间。#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。#3.当想要取消一个正在进行的failover所需要的时间。 #4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了# 默认三分钟# sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;sentinel failover-timeout mymaster 180000 #配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。#对于脚本的运行结果有以下规则：#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。 #通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。#通知脚本# sentinel notification-script &lt;master-name&gt; &lt;script-path&gt; sentinel notification-script mymaster /var/redis/notify.sh # 客户端重新配置主节点参数脚本# 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。# 以下参数将会在调用脚本时传给脚本:# &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;# 目前&lt;state&gt;总是“failover”,# &lt;role&gt;是“leader”或者“observer”中的一个。 # 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的# 这个脚本应该是通用的，能被多次调用，不是针对性的。# sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt; sentinel client-reconfig-script mymaster /var/redis/reconfig.sh 启动 1./redis-sentinel sentinel.conf Jedis普通环境Jedis 包：jedis-2.9.0.jar + 数据库连接池包：commons-pool2 12345678// 1.设置IP地址和端口Jedis jedis = new Jedis(&quot;localhost&quot;, 6379);// 2.设置数据jedis.set(&quot;key1&quot;, &quot;value1&quot;);// 3.获得数据String value = jedis.get(&quot;key1&quot;);// 4.释放资源jedis.close(); 可以封装成Utils工具类 1private Jedis jedis = new Jedis(&quot;localhost&quot;, 6379); 连接池连接 123456789101112131415161718192021222324252627// 1.获得连接池配置对象，设置配置项JedisPoolConfig config = new JedisPoolConfig();// 最大连接数和最大空闲连接数config.setMaxTotal(30);config.setMaxIdle(10);// 2.创建连接池对象JedisPool jedisPool = new JedisPool(config,&quot;127.0.0.1&quot;, 6379);// 3.从连接池中获得连接Jedis jedis = null;try&#123; jedis = jedisPool.getResource(); // 4.设置数据 jedis.set(&quot;key1&quot;, &quot;value1&quot;); // 5.获得数据 String value = jedis.get(&quot;key1&quot;);&#125; catch (Exception e)&#123; e.printStatckTrace();&#125; finally &#123; // 6.关闭连接 if(jedis != null)&#123; jedis.close(); &#125; // 7.关闭连接池 if(jedisPool != null)&#123; jedisPool.close(); &#125;&#125; spring整合（本身线程不安全 需要数据库连接池的支持）Jedis+pool spring环境的高级封装RedisTemplate配置redis.properties：#访问地址redis.host=127.0.0.1#访问端口redis.port=6379#注意，如果没有password，此处不设置值，但这一项要保留redis.password=#最大空闲数，数据库连接的最大空闲时间。超过空闲时间，数据库连接将被标记为不可用，然后被释放。设为0表示无限制。redis.maxIdle=300#连接池的最大数据库连接数。设为0表示无限制redis.maxTotal=600#最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。redis.maxWait=1000#在borrow一个jedis实例时，是否提前进行alidate操作；如果为true，则得到的jedis实例均是可用的；redis.testOnBorrow=true spring-redis.xml： &lt;context:property-placeholder location=”classpath:redis.properties” file-encoding=”utf-8” ignore-unresolvable=”true”/&gt; 在applactionContext.xml引入spring-redis.xml springboot环境整合可以直接注入RedisTemplate + reids配置类 org.springframework.boot spring-boot-starter-data-redis redis.clients jedis io.lettuce lettuce-core application.yml：spring: redis: database: 0 host: localhost port: 6379 password: timeout: 0 jedis: pool: max-active: 8 max-wait: 20000 max-idle: 20 RedisConfiguration.java：@Configuration@EnableCachingpublic class RedisConfiguration extends CachingConfigurerSupport { private static final Logger logger = LoggerFactory.getLogger(RedisConfiguration.class); @Bean @Override public KeyGenerator keyGenerator() { return (target, method, params) -&gt; { StringBuilder sb = new StringBuilder(); sb.append(target.getClass().getName()); sb.append(“:”); sb.append(method.getName()); for (Object obj : params) { sb.append(“:” + String.valueOf(obj)); } String rsToUse = String.valueOf(sb); logger.info(“自动生成Redis Key -&gt; [{}]”, rsToUse); return rsToUse; }; } @Bean public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory connectionFactory) { // StringRedisSerializer\JdkSerializationRedisSerializer进行序列化的，springboot是通过Jackson2JsonRedisSerializer进行序列化的 Jackson2JsonRedisSerializer&lt;Object&gt; redisSerializer = new Jackson2JsonRedisSerializer&lt;Object&gt;( Object.class); ObjectMapper om = new ObjectMapper(); om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); redisSerializer.setObjectMapper(om); //JdkSerializationRedisSerializer redisSerializer = new JdkSerializationRedisSerializer(); // 配置redisTemplate RedisTemplate&lt;String, Object&gt; redisTemplate = new RedisTemplate&lt;String, Object&gt;(); redisTemplate.setConnectionFactory(connectionFactory); RedisSerializer&lt;?&gt; stringSerializer = new StringRedisSerializer(); redisTemplate.setKeySerializer(stringSerializer); // key序列化 redisTemplate.setValueSerializer(redisSerializer); // value序列化 redisTemplate.setHashKeySerializer(stringSerializer); // Hash key序列化 redisTemplate.setHashValueSerializer(redisSerializer); // Hash // value序列化 redisTemplate.afterPropertiesSet(); return redisTemplate; } @Override @Bean public CacheErrorHandler errorHandler() { // 异常处理，当Redis发生异常时，打印日志，但是程序正常走 logger.info(&quot;初始化 -&gt; [{}]&quot;, &quot;Redis CacheErrorHandler&quot;); CacheErrorHandler cacheErrorHandler = new CacheErrorHandler() { @Override public void handleCacheGetError(RuntimeException e, Cache cache, Object key) { logger.error(&quot;Redis occur handleCacheGetError：key -&gt; [{}]&quot;, key, e); } @Override public void handleCachePutError(RuntimeException e, Cache cache, Object key, Object value) { logger.error(&quot;Redis occur handleCachePutError：key -&gt; [{}]；value -&gt; [{}]&quot;, key, value, e); } @Override public void handleCacheEvictError(RuntimeException e, Cache cache, Object key) { logger.error(&quot;Redis occur handleCacheEvictError：key -&gt; [{}]&quot;, key, e); } @Override public void handleCacheClearError(RuntimeException e, Cache cache) { logger.error(&quot;Redis occur handleCacheClearError：&quot;, e); } }; return cacheErrorHandler; } }集群]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>redis安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[04mysql环境]]></title>
    <url>%2Fdocs%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F04mysql%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[1.安装yum安装 1yum install mysql-server 官网源安装 1234567wget -ox /usr/mysql/mysql80-community-release-el7-3.noarch.rpm https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpmyum localinstall mysql80-community-release-el7-3.noarch.rpm查询可以安装的版本yum repolist all | grep mysql安装服务器版yum install mysql-community-server 压缩版安装（比较麻烦 不建议） 123456789101112131415161718tar –xzvf mysql-5.1.56.tar.gz #对mysql tar包解压缩cd myql-5.1.56./configure –prefix=/usr/local/mysql #制定mysql的安装目录make #编译源代码make install #安装cp support-files/my-medium.cnf /etc/my.cnf #复制配置文件模板cd /usr/local/mysqlbin/mysql_install_db –user=root #初始化安装mysql数据库bin/mysqld_safe –user=root &amp; #使用用户mysql安全启动mysql程序并放到后台执行配置环境变量将以下信息添加到用户下的.base_profile 文件中 #mysql items beginexport MYSQL_HOME=MySQL 安装目录export PATH=$MYSQL_HOME/bin:$PATHexport LD_LIBRARY_PATH=$MYSQL_HOME/lib:$LD_LIBRARY_PATHexport LIBPATH=$LD_LIBRARY_PATH:$LIBPATH#mysql items end 2.启动mysql12service mysqld startsystemctl start mysqld 3.修改mysqld执行权限（可能用不到）1chmod 755 /etc/rc.d/init.d/mysqld 4.修改mysql的root账户密码12345678910111213141516查看临时密码grep &apos;temporary password&apos; /var/log/mysqld.log//进入mysqlmysql -u root -p//修改密码ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;Root123.&apos;;//查看 mysql 初始的密码策略SHOW VARIABLES LIKE &apos;validate_password%&apos;;//设置密码的验证强度等级set global validate_password_policy=LOW;//设置密码的长度set global validate_password_length=6;或mysqladmin -u root password &apos;newpwd&apos;（8位+大小写+加数字+特殊字符） 5.设置mysql开机启动12chkconfig mysqld on systemctl enable mysqld.service 6.设置远程连接让%（所有ip的）用户拥有访问所有库和表的权限。用户名为root 密码为123456 1234mysql -u root -puse mysql;select host, user, authentication_string, plugin from user;update user set host = &quot;%&quot; where user = &quot;root&quot;; 1grant all privileges on *.* to root@&apos;%&apos; identified by &apos;root&apos; with grant option;(8版本用不到了) 刷新权限，不用重启立即生效 1flush privileges; 7.连接mysql时报caching_sha2_password错误原因： mysql8.0和5.x其中一个改动就是加密认证方式发生改变， caching_sha2_password是8.0mysql_native_password是5.x 解决方案： 1，更改mysql的加密认证方式 123use mysql;update user set plugin=&apos;mysql_native_password&apos; where user=&apos;root&apos;;flush privileges; 2，更改mysql的jdbc版本 8. Host is blocked because of many connection errors; unblock with ‘mysqladmin flush-hosts’报错原因： 同一个ip在短时间内产生太多（超过mysql数据库max_connection_errors的最大值）中断的数据库连接而导致的阻塞； 解决方法： 解决方法： 1、提高允许的max_connection_errors数量： ① 进入Mysql数据库查看max_connection_errors： show variables like ‘%max_connect_errors%’; ② 修改max_connection_errors的数量为1000： set global max_connect_errors = 1000; ③ 查看是否修改成功：show variables like ‘%max_connect_errors%’; 2、使用mysqladmin flush-hosts 命令清理一下hosts文件（不知道mysqladmin在哪个目录下可以使用命令查找：whereis mysqladmin）； ① 在查找到的目录下使用命令修改：mysqladmin –socket=/tmp/kkimdb.sock –port=3306 -uhyman -p flush-hosts 备注： 配置有master/slave主从数据库的要把主库和从库都修改一遍的（我就吃了这个亏明明很容易的几条命令结果折腾了大半天）； flush hosts; 也可以]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>mysql安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[03tomcat环境]]></title>
    <url>%2Fdocs%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F03tomcat%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[1.解压安装包1tar -zxvf /usr/tomcat/apache-tomcat-9.0.24.tar.gz 2.测试启动Tomcat进入tomcat的bin目录 1sh ./startup.sh 如果报错-bash: startup.sh: command not found 则chmod u+x *.sh]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>tomcat安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[02java环境]]></title>
    <url>%2Fdocs%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F02java%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[0.删除系统预装jdk可以一条命令直接删除 1rpm -e --nodeps `rpm -qa | grep java` 1.解压tar包1tar -zxvf jdk-8u211-linux-x64.tar.gz 2.编辑java环境变量配置文件1vim /etc/profile 123456最底下加上export JAVA_HOME=/usr/soft/java/jdk1.8.0_221export JRE_HOME=$JAVA_HOME/jreexport CLASSPATH=.:$JAVA_LIB/tools.jar:$JAVA_LIB/dt.jarexport PATH=$JAVA_HOME/bin:$PATH保存退出 123source /etc/profile 使配置生效（可能会需要等一会儿才能生效）或. /etc/profile 如果报错 -bash: /user/java/jdk1.8.0_221/bin/java: Permission denied则 chmod 777 /user/java/jdk1.8.0_221/bin/java 3.查询java版本1java –version 4.运行jarjava -jar springboot-0.0.1-SNAPSHOT.jar 5.后台运行jarnohup java -jar springboot-0.0.1-SNAPSHOT.jar &amp;nohup java -jar springboot-0.0.1-SNAPSHOT.jar &gt; log.file 2&gt;&amp;1 &amp; 如果是访问云服务器的页面，可能需要配置安全规则 添加所有访问到本服务器的8080端口]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>Java安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01CentOS7操作系统的基础]]></title>
    <url>%2Fdocs%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F01CentOS7%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[系统目录简介/ 根目录 bin (binaries)存放二进制可执行文件 sbin (super user binaries)存放二进制可执行文件，只有root才能访问 etc (etcetera)存放系统置文件 usr (unix shared resources)用于存放共享的系统资源home存放用户文件的根目录 root 超级用户目录 dev (devices)用于存放设备文件 lib (library)存放跟文件系统中的程序运行所需要的共享库及内核模块 mnt (mount)系统管理员安装临时文件系统的安装点 boot 存放用于系统引|导时使用的各种文件 tmp (tempor any)用于存放各种临时文件 var (variable)用于存放运行时需要改变数据的文件磁盘管理1.查看当前文件目录pwd 显示工作目录2.列出目录内容ls [参数][文件或目录] 缺省为ls -a ls -l 显示文件详细信息（简化命令为ll） ls -al 显示文件详细信息（包括隐藏文件） ls -a/all 显示文件名字（包括隐藏文件） ls -t 更改时间排序 ls -r 反向排序3.切换目录cd [目录] 缺省为cd ~ cd 目录名 进入指定文件夹（不存在则提示） cd ~ 当前用户目录 cd / 根目录 cd - 上次访问目录 cd .. 上一级目录4.创建目录mkdir [参数] 目录名（支持多级） mkdir -p 目录名 父目录不存在先生成父目录（parents） mkdir -v 目录名 显示执行过程5.删除目录rmdir 目录名 删除空目录文件管理文件浏览1.查看文件内容cat 文件 显示文件所有内容2.分页查看文件内容more 文件 分页显示文件内容进入后 回车 向下一行 空格 向下滚动一屏（ctrl+f） b 返回上一屏（ctrl+b） q 退出 3.分页查看文件内容增强版less [参数] 文件 less -m 文件名 百分比显示（相当于more） less -n 文件名 显示每行行数进入后 空格 前进一页（page down键） b 返回上一屏（page up键） d 前进半页 u 后退半页 回车 前进一行（方向键向下） y 后退一行（方向键向上） /字符串 向上搜索 ?字符串 向下搜索 v 进入vim编辑器 左右方向键 水平滚动条 q 退出 3.查看文件末尾（可用于查看log文件）tail 必要参数 [选择参数][文件] -行数 显示函数 -f 循环读取（ctrl+c取消） &amp; 后台运行文件操作1.复制文件或目录cp [参数] 源文件或目录 目标文件或目录 -r/--recursive 递归处理 指定目录的文件和子目录全部处理（复制目录必须带-r参数） -b 覆盖文件时备份旧文件2.移动或更名 文件或目录12mv [源文件或目录] [目标文件或目录]-f/--force 若目标文件或目录与现有文件或目录重复，则直接覆盖 3.删除 文件或目录123rm [-dfirv] [--help] [--version] [文件或目录]-f/--force 强制删除文件或目录-r/--recursive 递归处理 4.查找 文件或目录12find [目录] [参数]-name 指定字符串作为寻找文件或目录的范本文件 文档编辑1.基本操作vi或vim命令 12345vim 文件名 进入一般模式i/a/o 进入插入模式esc 从插入模式退到一般模式: 从一般模式进入命令行/末行模式:w/:wq/:q/:q! 末行模式命令：保存/保存并退出/退出/强制退出（还可以编辑环境 入寻找字符串 列出行号等） 2.常用命令插入 12 复制或粘贴 12 定位 12 删除 12 选择 12 3.管道命令| 位于回车键上面（shift+\） 1命令1|命令2 将命令1的输出内容作为命令2的输入内容 一般与grep使用 4.文本查找命令1234全局正则表达式输出grep [option] parrern [file] 搜索/过滤特定字符-i/--ignore-case 忽略大小写搭配管道命令使用 如：cat /root/install.log | grep -i control 在cat命令输出结果 过滤control 系统命令查看端口情况 netstat -anp 1.查看进程123ps [参数]-e/-a 显示所有程序-f 显示UID、PPIP、C与STIME 2.杀死进程123kill [参数] [程序] 删除执行中的程序或工资-l&lt;信息编号&gt; 列出全部的信息名称-9 pid号 强制终止 3.查看网络配置1ifconfig 4.测试网络12ping IP地址或域名ctrl+c退出ping 二进制软件包管理及配置（针对红帽系列）1.RPM包管理 RPM软件包的一个例子: sudo-1.7.2pl-5.el5.i386.rpm 其中包括软件名(sudo),版本号(1.7.2pl),发行号(5.el5),和硬件版本(i386)2.YUM包管理 应用yum的好处: 自动解决软件包依赖关系; 方便的软件包升级;wget 1.相关命令1.rpm包管理 12345678910111213141516171819rpm [参数] [软件]-a 查询所有套件-v 显示指令执行过程-h/--hash 套件安装时列出标记-q 询问模式-i/--install 套件名 安装指定套件-u/--upgrade 套件名 升级指定套件-e/--erase 套件名 删除指定套件--nodeps 不验证套件档的相互关联性挂载光盘:(?) mkdir /mnt/cdrom mount /dev/cdrom /mnt/cdrom常用：rpm -ivh 软件.rpm --安装rpm -Uvh 软件 --更新rpm -e --nodeps 软件 --强制删除rpm -qa --查看 2.yum包管理 123456yum list 软件包名 --软件包查询yum info 软件包名 --软件包信息yum install 软件 --安装yum remove 软件 --卸载yum check-update 软件 --检测升级yum update 软件包名 --升级 2.配置yum源1.备份配置文件 1mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 2.下载阿里云的Centos-7.repo文件 1wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.rep 123456789101112131415[serverid]#serverid是用于区别各个不同的repository（仓库;贮藏室），必须有一个独一无二的名称name=Some name for this server#name，是对repository的描述#$releasever 表示当前系统的发行版本，可以通过rpm -qi centos-release命令查看#$basearch 系统硬件架构(CPU指令集),使用命令arch得到baseurl=url://path/to/repository/#可以跟多个url 但baseurl只能有一个#url之后可以加上多个选项，如gpgcheck、exclude、failovermethod等gpgcheck=1#其中gpgcheck，exclude的含义和[main]部分相同，但只对此服务器起作用(main在/etc/yum.conf中)failovermethode=priority#failovermethode 有两个选项roundrobin和priority，意思分别是有多个url可供选择时，yum选择的次序，roundrobin是随机选择，如果连接失 败则使用下一个，依次循环，priority则根据url的次序从第一个开始。如果不指明，默认是roundrobin。 阿里巴巴 网易163 清华大学 123yum list #显示yum包yum clean all #清除yum缓存yum makecache #缓存本地yum仓库中的软件包信息 3.其他方式安装源代码包安装 123456789tar –xzvf 压缩包.tar.gz (解压解包)cd 解压后目录./configure –prefix=/usr/local/指定的安装路径 (配置)说明:--prefix参数用来指定安装目录,默认是安装在/usr/local/下 rpm包是在打包的时候作者已经做好了安装的路径,所以不用设置make (编译)说明:把文件生成可用执行和使用的文件make install (安装)说明:如果在安装过程中出现了错误,那么就把安装目录和解压缩后的文件夹删除就可用了.但是如果安装的是MYSQL这样的包,就需要把MYSQL的进程停掉,然后删除安装目录和解压缩后的文件夹就可以了 shell脚本安装 1234tar –xzvf 压缩包.tar.gzcd 解压后目录cat README./setup.sh 压缩和解压12345678tar 命令 压缩或解压-c 压缩（create 建立压缩文件的参数指令）-x 解压（extract 解开压缩文件的参数指令）-z 是否使用gzip压缩-v 是否显示压缩过程文件-f 文件名 使用档名常用压缩指令：tar zcvf 文件名常用解压指令：tar zxvf 文件名 关机和重启init 3 图形界面切换命令界面 init 5 命令界面切换图形界面 init 6 或 reboot系统重启 shutdown 关机 -h now（init0） halt文件权限12345678910111213141516171819202122232425262728293031323334chmod 变更文件或目录的权限chmod [参数] [&lt;权限范围&gt;&lt;符号&gt;&lt;权限代号&gt;] 文件或目录-r/--recursive 递归处理权限范围:u:user，拥有者g:group，所属群组o:other，其他用户a:all，全部的用户符号+添加权限-取消权限权限代号r:读取，数字代号&quot;4&quot;w:写入，数字代号&quot;2&quot;x:执行文件或进入目录，数字代号&quot;1&quot;-:不具任何权限，数字代号&quot;0&quot;eg:chmod u-rwx 文件或目录（拥有者所有权限）chmod o-r-- 文件或目录（其他用户只读）chmod 777 文件或目录（全部用户所有权限）chmod 755 文件或目录（拥有者所有权限 所属群组不可写入 其他用户不可写入）linux文件权限格式&lt;类型&gt;&lt;用户&gt;&lt;组&gt;&lt;其他用户&gt;-rwxrw-r---/rwx/rw-/r--1:文件类型 d目录 -普通文件 l链接文件2-4:拥有者权限5-7:所属组权限8-10:其他用户权限 网络配置1.VIM命令配置输入ip查询命名 ip addr 也可以输入 ifconfig（如果没有ifconfig命令 则需要安装net-tools）查看ip，但此命令会出现3个条目，centos的ip地址是ens33条目中的inet值 123456789101112131415161718vim /etc/sysconfig/network-scripts/ifcfg-ens33DEVICE=eth33 #网卡名称TYPE=Ethernet #网卡类型NM_CONTROLLED=yes #BOOTPROTO=dhcp #dhcp获得id 还有设为静态static 则需要设置以下#IPADDR=192.168.1.111 #静态ip地址#GATEWAY=192.168.1.2 #网关#PREFIX=24 #子网掩码#DNS1=192.168.1.2DEFROUTE=yes #IPV4_FAILURE_FATAL=yes #IPV6INIT=no #NAME=eth33 #PEERDNS=yes #PEERROUTES=yes #LAST_CONNECT=1528693814 #ONBOOT=yes #是否开始启动网卡 重启网卡服务 12service network restart（CentOS7 网络服务器版 配置静态可能需要重启电脑 不好说） 测试确认ping www.baidu.com 确认网络恢复正常 2.setup命令配置（CentOS7之前）1234567setup防火墙配置键盘配置网络配置——设备配置——第一块网卡——设置IP地址等信息系统服务（设置开机自启动服务）验证配置上下键选择 tab键切换焦点 回车确定 3.nmtui命令配置（CentOS7之后 用了这个不能设置静态IP 关了吧）修改主机名12vim /etc/sysconfig/network（重启生效）hostnamectl set-hostname 主机名（立即生效） 用户切换su - su - root 切换root用户 su 普通用户名 exit 退出到原先的用户查看当前用户当前登录系统的用户信息 whoami 或 who am iCentOS7查看和关闭防火墙iptables通过控制端口来控制服务，而firewall则是通过控制协议来控制端口 （只能开一个） ConterOS7.0以上默认使用的是firewall，ConterOS7.0以下默认使用的是iptables firewall（很麻烦）查看防火墙状态 123firewall-cmd --state（notrunning 未启动 / running 启动）或systemctl status firewalld（更详细） 停止firewall 1systemctl stop firewalld.service 禁止firewall开机启动 1systemctl disable firewalld.service 重启防火墙 1firewall-cmd --reload 开放端口（修改后需要重启防火墙方可生效） 1firewall-cmd --zone=public --add-port=8080/tcp --permanent 查看开放的端口 1firewall-cmd --list-ports 关闭端口 1firewall-cmd --zone=public --remove-port=8080/tcp --permanent 1234567891011121314151617181920212223242526272829303132firewall-cmd --state 查看状态（若关闭，则先开启systemctl start firewalld）firewall-cmd --list-ports 查看已开放的端口开启8000端口：firewall-cmd --zone=public(作用域) --add-port=8000/tcp(端口和访问类型) --permanent(永久生效)firewall-cmd --zone=public --add-port=1521/tcp --permanentfirewall-cmd --zone=public --add-port=3306/tcp --permanentfirewall-cmd --zone=public --add-port=50070/tcp --permanentfirewall-cmd --zone=public --add-port=8088/tcp --permanentfirewall-cmd --zone=public --add-port=19888/tcp --permanentfirewall-cmd --zone=public --add-port=9000/tcp --permanentfirewall-cmd --zone=public --add-port=9001/tcp --permanentfirewall-cmd --reload -重启防火墙firewall-cmd --list-ports 查看已开放的端口systemctl stop firewalld.service停止防火墙systemctl disable firewalld.service禁止防火墙开机启动关闭端口：firewall-cmd --zone= public --remove-port=8000/tcp --permanent iptables（比较简单）安装防火墙 1yum install iptables-services 开启防火墙 1systemctl start iptables.service 关闭防火墙 1systemctl stop iptables.service 查看防火墙状态 1systemctl status iptables.service 设置开机启动 1systemctl enable iptables.service 编辑防火墙文件 12345678910111213141516171819202122232425vim /etc/sysconfig/iptables:INPUT ACCEPT [0:0]:FORWARD ACCEPT[0:0]:OUTPUT ACCEPT[0:0]-A INPUT -m state--state RELATED,ESTABLISHED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -jACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 6379 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8081 -j ACCEPT-A INPUT -j REJECT--reject-with icmp-host-prohibited-A FORWARD -jREJECT --reject-with icmp-host-prohibitedCOMMIT22 ssh(默认开启)80 nginx3306 mysql6379 redis8080 tomcat8081 第二个tomcat保存 如果没有该文件 12345控制台使用iptables命令随便写一条防火墙规则iptables -A OUTPUT -j ACCEPTiptables -I INPUT -p tcp --dport 8080 -j ACCEPT或者service iptables save 重启防火墙使配置文件生效 1systemctl restart iptables.service 关闭selinux进入到/etc/selinux/config文件 12vim /etc/selinux/config将SELINUX=enforcing改为SELINUX=disabled 修改hosts文件vim /etc/hosts 配制免密登录的命令（HDFS集群用到）123456789ssh-keygen -t rsa 或 ssh-keygen（客户机上）三次回车此时/root/.ssh目录下id_rsa为私钥（客户机）id_rsa.pub为公钥（服务器）ssh-copy-id 192.168.1.111（ssh-copy-id root@主机名）输入密码 帮助文档man 命令名 更完整 help 命令名 简单叙述]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[00Linux安装的基础]]></title>
    <url>%2Fdocs%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F00Linux%E5%AE%89%E8%A3%85%E7%9A%84%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[0.检验文件完整性CentOS-7-x86_64-DVD-1810.iso sha256 文件 3213b2c34cecbb3bb817030c7f025396b658634c0cf9c4435fc0b52ec9644667 CentOS-7-x86_64-LiveGNOME-1810.iso 38d5d51d9d100fd73df031ffd6bd8b1297ce24660dc8c13a3b8b4534a4bd291c CentOS-7-x86_64-Minimal-1810.iso 6d44331cc4f6c506c7bbe9feb8468fad6c51a88ca1393ca6b8b486ea04bec3c1 CentOS-7-x86_64-DVD-1810.iso 87623c8ab590ad0866c5f5d86a2d7ed631c61d69f38acc42ce2c8ddec65ecea2 CentOS-7-x86_64-LiveKDE-1810.iso 918975cdf947e858c9a0c77d6b90a9a56d9977f3a4496a56437f46f46200cf71 CentOS-7-x86_64-Everything-1810.iso 19d94274ef856c4dfcacb2e7cfe4be73e442a71dd65cc3fb6e46db826040b56e CentOS-7-x86_64-NetInstall-1810.iso windows的cmd命令： 1234certutil -hashfile .\CentOS-7-x86_64-DVD-1810.iso SHA256SHA256 的 .\CentOS-7-x86_64-DVD-1810.iso 哈希:6d44331cc4f6c506c7bbe9feb8468fad6c51a88ca1393ca6b8b486ea04bec3c1CertUtil: -hashfile 命令成功完成。 文本比对：https://tool.lu/diff/ 1.选择语言中文——简体中文(中国) 2.安装信息摘要网络和主机名——打开以太网、修改主机名 时间和日期——亚洲、上海、修改为当前系统时间并打开网络时间（一般减八个小时） 安装源——自动检测的安装介质 软件选择——基础网页服务器——直接点完成 （开发学习选择开发及生成工作站，网页服务器选择基础网页服务器，普通用选择gnome界面版本即可，专家水平选择最小安装 特别干净 常用软件都没有） 安装位置——本地标准磁盘 3.配置root超级用户密码4.等待安装完成]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
</search>
