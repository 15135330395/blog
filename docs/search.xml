<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[07mysql集群和mycat]]></title>
    <url>%2Fblog%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F07mysql%E9%9B%86%E7%BE%A4%E5%92%8Cmycat%2F</url>
    <content type="text"><![CDATA[mysql 集群主从复制（自带）方式有多种：基于基于日志（binlog）的主从复制方式、 原理 Master将数据改变记录到二进制日志(binary log)中，也就是配置文件log-bin指定的文件，这些记录叫做二进制日志事件(binary log events)； Slave 通过 I/O 线程读取 Master 中的 binary log events 并写入到它的中继日志(relay log)； Slave 重做中继日志中的事件， 把中继日志中的事件信息一条一条的在本地执行一次，完成数据在本地的存储， 从而实现将改变反映到它自己的数据(数据重放)。 主从配置需要注意的点 主从服务器操作系统版本和位数一致； Master 和 Slave 数据库的版本要一致； Master 和 Slave 数据库中的数据要一致； Master 开启二进制日志， Master 和 Slave 的 server_id 在局域网内必须唯一； 步骤： Master配置 安装数据库； 修改数据库配置文件， 指明 server_id， 开启二进制日志(log-bin)； vim /etc/my.cnf [mysqld] skip-name-resolvelog-bin=mysql-binlog_timestamps=SYSTEMserver-id=111 启动数据库， 查看当前是哪个日志， position 号是多少； SHOW MASTER STATUS; show variables like ‘server_id’; set global server_id=111; #此处的数值和my.cnf里设置的一样就行 登录数据库， 授权数据复制用户（IP 地址为从机 IP 地址， 如果是双向主从， 这里的还需要授权本机的 IP 址， 此时自己的 IP 地址就是从 IP 地址)； 备份数据库（记得加锁和解锁）； 传送备份数据到 Slave 上； 启动数据库； 主机查看从机 show slave hosts; Slave 上的配置 安装数据库 （如果服务器完全复制 需要删掉/var/lib/mysql/auto.cnf文件并重启mysql 重新生成mysql的uuid） 修改数据库配置文件， 指明 server_id（如果是搭建双向主从的话， 也要开启二进制日志 log-bin）； vim /etc/my.cnf [mysqld]log-bin=mysql-binlog_timestamps=SYSTEMserver-id=112 show variables like ‘server_id’;log_timestamps=SYSTEMset global server_id=112; #此处的数值和my.cnf里设置的一样就行 启动数据库， 还原备份； 查看当前是哪个日志， position 号是多少（单向主从此步不需要， 双向主从需要）； SHOW MASTER STATUS; 指定 Master 的地址、 用户、 密码等信息；（show的内容） CHANGE MASTER TOMASTER_HOST=’192.168.1.111’,MASTER_USER=’root’,MASTER_PASSWORD=’Root123.’,MASTER_LOG_FILE=’mysql-bin.000001’,MASTER_LOG_POS=155; 开启同步， 查看状态。show slave status\G;start slave;show slave status\G; 确保Slave_IO_Running=Yes Slave_SQL_Running=Yes 否则重新配置从服务器配置文件（或查看上次错误原因Last_IO_Error） 读写分离（mysql-proxy 第三方）1.配置文件 vim /etc/my.cnf 主 12345678[mysqld]log-bin=mysql-bin #从库会基于此log-bin来做复制binlog-do-db=mytest #用于读写分离的具体数据库，这里我创建了mytest作测试binlog_ignore_db=mysql #不用于读写分离的具体数据库binlog_ignore_db=information_schema #和binlog-do-db一样，可以设置多个#选择row模式 binlog-format=ROWserver-id=1 从 123456[mysqld]log-bin=mysql-bin #从库会基于此log-bin来做复制replicate-do-db=mytest #用于读写分离的具体数据库，这里我创建了mytest作测试#选择row模式 binlog-format=ROWserver-id=2 2.mysql-proxy是官方提供的mysql中间件产品可以实现负载平衡，读写分离（配多个 防止单点失效） 下载 mysql-proxy-并安装 创建配置文件 安装目录/bin/mysql-proxy.conf 123456789101112131415161718[mysql-proxy]#用于中间件连接的用户admin-username=rootadmin-password=root#根据存放的文件位置自行调整admin-lua-script=C:/mysql-proxy-0.8.5-windows-x86-32bit/lib/mysql-proxy/lua/admin.lua #主库服务器+端口proxy-backend-addresses=192.168.103.207:3307#从库服务器+端口，多个从库用，隔开proxy-read-only-backend-addresses=192.168.103.208:3307#日志文件存放位置，如果你指定了一个路径，请确保手动创建了对应的文件夹，否则会报错log-file=C:/mysql-proxy-0.8.5-windows-x86-32bit/log/mysql-proxy.log#日志级别log-level=debug#以守护进程方式运行daemon=true#长连接keepalive=true 启动 1.\mysql-proxy.exe -P 192.168.103.203:6217 --defaults-file=mysql-proxy.conf 3.下载Atlas会有两个版本，其中有个分表的版本，但是这个需要其他的依赖，我这边不需要分表这种需求，所以安装普通的版本 ​ Atlas (普通) : Atlas-2.2.1.el6.x86_64.rpm ​ Atlas (分表) : Atlas-sharding_1.0.1-el6.x86_64.rpm 下载并安装 /usr/local/mysql-proxy/里有4个文件夹（bin conf lib log） bin目录下放的都是可执行文件 \1. “encrypt”是用来生成MySQL密码加密的，在配置的时候会用到 \2. “mysql-proxy”是MySQL自己的读写分离代理 \3. “mysql-proxyd”是360弄出来的，后面有个“d”，服务的启动、重启、停止。都是用他来执行的 conf目录下放的是配置文件 \1. “test.cnf”只有一个文件，用来配置代理的，可以使用vim来编辑 进入bin目录，使用encrypt来对数据库的密码进行加密，我的MySQL数据的用户名是buck，密码是hello，我需要对密码进行加密 1./encrypt hello 配置Atlas，使用vim进行编辑 vim test.cnf 12345678910111213141516171819#管理接口的用户名admin-username = user#管理接口的密码admin-password = pwd#Atlas后端连接的MySQL主库的IP和端口，可设置多项，用逗号分隔proxy-backend-addresses = 192.168.246.134:3306#Atlas后端连接的MySQL从库的IP和端口，@后面的数字代表权重，用来作负载均衡，若省略则默认为1，可设置多项，用逗号分隔proxy-read-only-backend-addresses = 192.168.246.135:3306@1#用户名与其对应的加密过的MySQL密码，密码使用PREFIX/bin目录下的加密程序encrypt加密，下行的user1和user2为示例，将其替换为你的MySQL的用户名和加密密码！pwds = buck:RePBqJ+5gI4=#Atlas监听的工作接口IP和端口proxy-address = 0.0.0.0:1234#Atlas监听的管理接口IP和端口（还可以指定IP，其他的IP无法访问管理员的命令界面）admin-address = 0.0.0.0:2345 启动 1./mysql-proxyd test start 确定mysql本身进不去 12/etc/init.d/mysqld statusmysql Atlas的管理模式能进去 它会把自己当成一个MySQL数据库mysql -h127.0.0.1 -P2345 -uuser -ppwd 12查看功能select * from help; 通过工作接口来访问 mysql -h127.0.0.1 -P1234 -ubuck -phello 可以让数据库某一台down掉，来测试监控的可用性 select * from backends; 读写分离测试这里测试读写分离需要使用到Jmeter了，它是Java写第一套开源的压力测试工具，因为这个比较方便。他有专门测试MySQL的模块，需要使用MySQL的JDBC驱动jar包，配置很简单，东西很好很强大很好用。 Jmeter下载地址：http://jmeter.apache.org/download_jmeter.cgi MySQL的JDBC ：http://dev.mysql.com/downloads/connector/j/ mycat集群（第三方）简介支持JDBC连接ORACLE、DB2、SQL Server，将其模拟为MySQL Server使用 1、Schema：逻辑库，与MySQL中的Database（数据库）对应，一个逻辑库中定义了所包括的Table。 2、Table：表，即物理数据库中存储的某一张表，与传统数据库不同，这里的表格需要声明其所存储的逻辑数据节点DataNode。在此可以指定表的分片规则。 3、DataNode：MyCAT的逻辑数据节点，是存放table的具体物理节点，也称之为分片节点，通过DataSource来关联到后端某个具体数据库上 4、DataSource：定义某个物理库的访问地址，用于捆绑到Datanode上 数据切分介绍垂直分割（不同表在不同数据库） 优点： 拆分后业务清晰，拆分规则明确。 系统之间整合或扩展容易。 数据维护简单。 缺点： 部分业务表无法join，只能通过接口方式解决，提高了系统复杂度。 受每种业务不同的限制存在单库性能瓶颈，不易数据扩展跟性能提高。 事务处理复杂。 由于垂直切分是按照业务的分类将表分散到不同的库，所以有些业务表会过于庞大，存在单库读写与存储瓶颈，所以就需要水平 拆分来做解决。 水平分割（数据量） 几种典型的分片规则包括： 按照用户ID求模，将数据分散到不同的数据库，具有相同数据用户的数据都被分散到一个库中。 按照日期，将不同月甚至日的数据分散到不同的库中。 按照某个特定的字段求摸，或者根据特定范围段分散到不同的库中。 优点有： 拆分规则抽象好，join操作基本可以数据库做。 不存在单库大数据，高并发的性能瓶颈。 应用端改造较少。 提高了系统的稳定性跟负载能力。 缺点有： 拆分规则难以抽象。 分片事务一致性难以解决。 数据多次扩展难度跟维护量极大。 跨库join性能较差。 前面讲了垂直切分跟水平切分的不同跟优缺点，会发现每种切分方式都有缺点，但共同的特点缺点有： 引入分布式事务的问题。 跨节点Join的问题。 跨节点合并排序分页问题。 多数据源管理问题。安装 官方网站： http://www.mycat.org.cn/ github地址 https://github.com/MyCATApache 下载后解压 12cd /usr/mycattar -zxvf Mycat-server-1.6.7.3-release-20190828135747-linux.tar.gz 启动命令：./mycat start 停止命令：./mycat stop 重启命令：./mycat restart 注意：可以使用mysql的客户端直接连接mycat服务。默认服务端口为8066 1mysql -uroot -p -P8066 -h127.0.0.1 -default_auth=mysql_native_password（因为连的mysql8 不写-default_auth会报密码错误 -h必须写上并加上IP） –bin 启动目录–conf 配置文件存放配置文件–lib MyCAT自身的jar包或依赖的jar包的存放目录。–logs MyCAT日志的存放目录。日志存放在logs/log中，每天一个文件 配置由于mycat不支持mysql8.0，所以需要将mysql8.0配置成5.x 1.修改加密规则 在mysql8之前的版本使用的密码加密规则是mysql_native_password，但是在mysql8则是caching_sha2_password。 12345use mysql;select user,host,plugin from user;update user set plugin=&apos;mysql_native_password&apos; where User=&apos;root&apos;;#修改加密规则ALTER USER &apos;root&apos;@&apos;localhost&apos; BY &apos;Root123.&apos;;#更新一下用户的密码FLUSH PRIVILEGES; #刷新权限 2.如果是在Linux平台，在首次启动前设置lower_case_table_names = 1（表名大小写不敏感），需要删除数据（不知道需不需要） 123456systemctl stop mysqld.servicerm -rf /var/lib/mysqlvim /etc/my.cnflower_case_table_names=1保存systemctl restart mysqld.service https://blog.csdn.net/jaysonhu/article/details/52858535 配置schema.xml管理着MyCat的逻辑库、表、分片规则、DataNode以及DataSource 是逻辑库定义和表以及分片定义的配置文件。 数据库8.0 所以需要替换jdbc驱动包和连接方式 123456789#删除mycat/lib下的mysql5.x驱动包（不删 可能也行）cd /usr/mycat/mycat/ligrm mysql-connector-java-5.1.35.jar放入mysql8.0驱动包 mysql-connector-java-8.0.17.jar对文件赋权限chmod 777 mysql-connector-java-8.0.17.jar如果mysql unblock with ‘mysqladmin flush-hosts’解决方法登陆mysql -u root -p 后执行命令 flush hosts; vim schema.xml 12345678910111213141516171819202122232425262728293031&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;&lt;mycat:schema xmlns:mycat=&quot;http://org.opencloudb/&quot;&gt;&lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot;&gt;&lt;!-- auto sharding by id (long) --&gt; &lt;table name=&quot;TB_ITEM&quot; dataNode=&quot;dn1,dn2,dn3&quot; rule=&quot;auto-sharding-long&quot; /&gt; &lt;table name=&quot;TB_USER&quot; primaryKey=&quot;ID&quot; type=&quot;global&quot; dataNode=&quot;dn1,dn2&quot; /&gt; &lt;/schema&gt; &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;db1&quot; /&gt; &lt;dataNode name=&quot;dn2&quot; dataHost=&quot;localhost2&quot; database=&quot;db2&quot; /&gt; &lt;dataNode name=&quot;dn3&quot; dataHost=&quot;localhost1&quot; database=&quot;db3&quot; /&gt; &lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;#native#改成jdbc&quot; switchType=&quot;1&quot; slaveThreshold=&quot;100&quot;&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;!-- can have multi write hosts --&gt; &lt;writeHost host=&quot;hostM1&quot; url=&quot;#192.168.1.111:3306#改成jdbc:mysql://192.168.1.111:3306?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF8&amp;amp;serverTimezone=UTC&quot; user=&quot;root&quot; password=&quot;root&quot;&gt; &lt;!-- can have multi read hosts --&gt; &lt;/writeHost&gt; &lt;/dataHost&gt; &lt;dataHost name=&quot;localhost2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot; slaveThreshold=&quot;100&quot;&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;!-- can have multi write hosts --&gt; &lt;writeHost host=&quot;hostM1&quot; url=&quot;192.168.25.166:3306&quot; user=&quot;root&quot; password=&quot;root&quot;&gt; &lt;!-- can have multi read hosts --&gt; &lt;/writeHost&gt; &lt;/dataHost&gt;&lt;/mycat:schema&gt; 配置server.xml保存了所有mycat需要的系统配置信息 是Mycat服务器参数调整和用户授权的配置文件。 1234567&lt;user name=&quot;test&quot;&gt; &lt;property name=&quot;password&quot;&gt;test&lt;/property&gt; &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt; &lt;property name=&quot;readOnly&quot;&gt;true&lt;/property&gt;&lt;/user&gt; 123456mysql -uroot -p -P8066 -h127.0.0.1 -default_auth=mysql_native_password数据系统mysql -uroot -p -P9066 -h127.0.0.1 -default_auth=mysql_native_password管理系统常用命令show @@help; 配置rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改需要重启MyCAT。 rule.xml里面就定义了我们对表进行拆分所涉及到的规则定义，可以灵活的对表使用不同的分片算法，或者对表使用相同的算法但具体的参数不同。这个文件里面主要有tableRule和function这两个标签。在具体使用过程中可以按照需求添加tableRule和function。可以不做修改，使用默认配置 配置log4j.xml日志存放在logs/log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要可以调整输出级别为debug debug级别下，会输出更多的信息，方便排查问题。 autopartition-long.txt,partition-hash-int.txt,sequence_conf.properties， sequence_db_conf.properties 分片相关的id分片规则配置文件 测试分片创建表并插入数据 由于配置的分片规则为“auto-sharding-long”，所以mycat会根据此规则自动分片。 每个datanode中保存一定数量的数据。根据id进行分片 经测试id范围为： Datanode1：1~5000000 Datanode2：5000000~10000000 Datanode3：10000001~15000000 当15000000以上的id插入时报错： [Err] 1064 - can’t find any valid datanode :TB_ITEM -&gt; ID -&gt; 15000001 此时需要添加节点了。 主从复制（同上） 读写分离 Mycat 1.4 支持MySQL主从复制状态绑定的读写分离机制，让读更加安全可靠，配置如下： 123456789101112&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;db1&quot; /&gt; &lt;dataNode name=&quot;dn2&quot; dataHost=&quot;localhost1&quot; database=&quot;db2&quot; /&gt; &lt;dataNode name=&quot;dn3&quot; dataHost=&quot;localhost1&quot; database=&quot;db3&quot; /&gt; &lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;2&quot; slaveThreshold=&quot;100&quot;&gt; &lt;heartbeat&gt;show slave status&lt;/heartbeat&gt; &lt;writeHost host=&quot;hostM&quot; url=&quot;192.168.25.134:3306&quot; user=&quot;root&quot; password=&quot;root&quot;&gt; &lt;readHost host=&quot;hostS&quot; url=&quot;192.168.25.166:3306&quot; user=&quot;root&quot; password=&quot;root&quot; /&gt; &lt;/writeHost&gt; &lt;/dataHost&gt; (1) 设置 balance=”1”与writeType=”0” Balance参数设置： \1. balance=“0”, 所有读操作都发送到当前可用的writeHost上。 \2. balance=“1”，所有读操作都随机的发送到readHost。 \3. balance=“2”，所有读操作都随机的在writeHost、readhost上分发 WriteType参数设置： \1. writeType=“0”, 所有写操作都发送到可用的writeHost上。 \2. writeType=“1”，所有写操作都随机的发送到readHost。 \3. writeType=“2”，所有写操作都随机的在writeHost、readhost分上发。 “readHost是从属于writeHost的，即意味着它从那个writeHost获取同步数据，因此，当它所属的writeHost宕机了，则它也不会再参与到读写分离中来，即“不工作了”，这是因为此时，它的数据已经“不可靠”了。基于这个考虑，目前mycat 1.3和1.4版本中，若想支持MySQL一主一从的标准配置，并且在主节点宕机的情况下，从节点还能读取数据，则需要在Mycat里配置为两个writeHost并设置banlance=1。” (2) 设置 switchType=”2” 与slaveThreshold=”100” switchType 目前有三种选择： -1**：表示不自动切换** 1 ：默认值，自动切换 2 ：基于MySQL主从同步的状态决定是否切换 “Mycat心跳检查语句配置为 show slave status ，dataHost 上定义两个新属性： switchType=”2” 与slaveThreshold=”100”，此时意味着开启MySQL主从复制状态绑定的读写分离与切换机制。Mycat心跳机制通过检测 show slave status 中的 “Seconds_Behind_Master”, “Slave_IO_Running”, “Slave_SQL_Running” 三个字段来确定当前主从同步的状态以及Seconds_Behind_Master主从复制时延。“ 监控平台emmm… 需要用到zookeeper 目前被监控的MySQL版本支持5.7（推荐），5.6。 而且还不支持8.0。。。有点尴尬 MyCAT自增字段和返回生成的主键ID的经验分享MyCAT自增字段和返回生成的主键ID的经验分享说明：1、mysql本身对非自增长主键，使用last_insert_id()是不会返回结果的，只会返回0.2、mysql只会对定义自增长主键，可以用last_insert_id()返回主键值。 mycat目前提供了自增长主键功能，但是如果对应的mysql节点上数据表，没有定义auto_increment，那么在mycat层调用last_insert_id()也是不会返回结果的。正确使用方式如下：1、mysql定义自增主键CREATE TABLE tt2 ( id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT, nm INT(10) UNSIGNED NOT NULL, PRIMARY KEY (id)) ENGINE=MYISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;2、mycat定义自增[root@test conf]# vim schema.xml&lt;mycat:schema xmlns:mycat=”http://org.opencloudb/&quot;&gt; &lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot;&gt; &lt;!-- random sharding using mod sharind rule --&gt; &lt;!-- autoIncrement=&quot;true&quot; 属性--&gt; &lt;table name=&quot;tt2&quot; primaryKey=&quot;id&quot; autoIncrement=&quot;true&quot; dataNode=&quot;dn1,dn2,dn3,dn4,dn5&quot; rule=&quot;mod-long&quot; /&gt; &lt;table name=&quot;mycat_sequence&quot; primaryKey=&quot;name&quot; dataNode=&quot;dn1&quot;/&gt; &lt;/schema&gt; &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;db1&quot; /&gt; &lt;dataNode name=&quot;dn2&quot; dataHost=&quot;localhost1&quot; database=&quot;db2&quot; /&gt; &lt;dataNode name=&quot;dn3&quot; dataHost=&quot;localhost1&quot; database=&quot;db3&quot; /&gt; &lt;dataNode name=&quot;dn4&quot; dataHost=&quot;localhost1&quot; database=&quot;db4&quot; /&gt; &lt;dataNode name=&quot;dn5&quot; dataHost=&quot;localhost1&quot; database=&quot;db5&quot; /&gt; &lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;20&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;writeHost host=&quot;hostM1&quot; url=&quot;127.0.0.1:3366&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt; &lt;/writeHost&gt; &lt;/dataHost&gt; 3、mycat对应sequence_db_conf.properties增加相应设置；4、mycat的对应mycat_sequence增加对应记录。5、链接mycat，测试结果如下： 127.0.0.1/root:[TESTDB&gt; insert into tt2(nm) values (99);Query OK, 1 row affected (0.14 sec) 127.0.0.1/root:[TESTDB&gt; select last_insert_id();+——————+| LAST_INSERT_ID() |+——————+| 101 |+——————+1 row in set (0.01 sec) 127.0.0.1/root:[TESTDB&gt; insert into tt2(nm) values (99);Query OK, 1 row affected (0.00 sec) 127.0.0.1/root:[TESTDB&gt; select last_insert_id();+——————+| LAST_INSERT_ID() |+——————+| 102 |+——————+1 row in set (0.00 sec) 127.0.0.1/root:[TESTDB&gt; insert into tt2(nm) values (99);Query OK, 1 row affected (0.00 sec) 127.0.0.1/root:[TESTDB&gt; select last_insert_id();+——————+| LAST_INSERT_ID() |+——————+| 103 |+——————+1 row in set (0.00 sec) 127.0.0.1/root:[TESTDB&gt; insert into tt2(nm) values (99);Query OK, 1 row affected (0.01 sec) 127.0.0.1/root:[TESTDB&gt; select last_insert_id();+——————+| LAST_INSERT_ID() |+——————+| 104 |+——————+1 row in set (0.00 sec) 127.0.0.1/root:[TESTDB&gt; insert into tt2(nm) values (99);Query OK, 1 row affected (0.00 sec) 127.0.0.1/root:[TESTDB&gt; select last_insert_id();+——————+| LAST_INSERT_ID() |+——————+| 105 |+——————+1 row in set (0.00 sec) 127.0.0.1/root:[TESTDB&gt; insert into tt2(nm) values (99);Query OK, 1 row affected (0.00 sec) 127.0.0.1/root:[TESTDB&gt; select last_insert_id();+——————+| LAST_INSERT_ID() |+——————+| 106 |+——————+1 row in set (0.00 sec)]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>mysql集群</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[04mysql环境]]></title>
    <url>%2Fblog%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F04mysql%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[1.安装yum安装 1yum install mysql-server 官网源安装 1234567wget -ox /usr/mysql/mysql80-community-release-el7-3.noarch.rpm https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpmyum localinstall mysql80-community-release-el7-3.noarch.rpm查询可以安装的版本yum repolist all | grep mysql安装服务器版yum install mysql-community-server 压缩版安装（比较麻烦 不建议） 123456789101112131415161718tar –xzvf mysql-5.1.56.tar.gz #对mysql tar包解压缩cd myql-5.1.56./configure –prefix=/usr/local/mysql #制定mysql的安装目录make #编译源代码make install #安装cp support-files/my-medium.cnf /etc/my.cnf #复制配置文件模板cd /usr/local/mysqlbin/mysql_install_db –user=root #初始化安装mysql数据库bin/mysqld_safe –user=root &amp; #使用用户mysql安全启动mysql程序并放到后台执行配置环境变量将以下信息添加到用户下的.base_profile 文件中 #mysql items beginexport MYSQL_HOME=MySQL 安装目录export PATH=$MYSQL_HOME/bin:$PATHexport LD_LIBRARY_PATH=$MYSQL_HOME/lib:$LD_LIBRARY_PATHexport LIBPATH=$LD_LIBRARY_PATH:$LIBPATH#mysql items end 2.启动mysql12service mysqld startsystemctl start mysqld 3.修改mysqld执行权限（可能用不到）1chmod 755 /etc/rc.d/init.d/mysqld 4.修改mysql的root账户密码12345678910111213141516查看临时密码grep &apos;temporary password&apos; /var/log/mysqld.log//进入mysqlmysql -u root -p//修改密码ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;Root123.&apos;;//查看 mysql 初始的密码策略SHOW VARIABLES LIKE &apos;validate_password%&apos;;//设置密码的验证强度等级set global validate_password_policy=LOW;//设置密码的长度set global validate_password_length=6;或mysqladmin -u root password &apos;newpwd&apos;（8位+大小写+加数字+特殊字符） 5.设置mysql开机启动12chkconfig mysqld on systemctl enable mysqld.service 6.设置远程连接让%（所有ip的）用户拥有访问所有库和表的权限。用户名为root 密码为123456 1234mysql -u root -puse mysql;select host, user, authentication_string, plugin from user;update user set host = &quot;%&quot; where user = &quot;root&quot;; 1grant all privileges on *.* to root@&apos;%&apos; identified by &apos;root&apos; with grant option;(8版本用不到了) 刷新权限，不用重启立即生效 1flush privileges; 7.连接mysql时报caching_sha2_password错误原因： mysql8.0和5.x其中一个改动就是加密认证方式发生改变， caching_sha2_password是8.0mysql_native_password是5.x 解决方案： 1，更改mysql的加密认证方式 123use mysql;update user set plugin=&apos;mysql_native_password&apos; where user=&apos;root&apos;;flush privileges; 2，更改mysql的jdbc版本 8. Host is blocked because of many connection errors; unblock with ‘mysqladmin flush-hosts’报错原因： 同一个ip在短时间内产生太多（超过mysql数据库max_connection_errors的最大值）中断的数据库连接而导致的阻塞； 解决方法： 解决方法： 1、提高允许的max_connection_errors数量： ① 进入Mysql数据库查看max_connection_errors： show variables like ‘%max_connect_errors%’; ② 修改max_connection_errors的数量为1000： set global max_connect_errors = 1000; ③ 查看是否修改成功：show variables like ‘%max_connect_errors%’; 2、使用mysqladmin flush-hosts 命令清理一下hosts文件（不知道mysqladmin在哪个目录下可以使用命令查找：whereis mysqladmin）； ① 在查找到的目录下使用命令修改：mysqladmin –socket=/tmp/kkimdb.sock –port=3306 -uhyman -p flush-hosts 备注： 配置有master/slave主从数据库的要把主库和从库都修改一遍的（我就吃了这个亏明明很容易的几条命令结果折腾了大半天）； flush hosts; 也可以]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>mysql安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[03tomcat环境]]></title>
    <url>%2Fblog%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F03tomcat%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[1.解压安装包1tar -zxvf /usr/tomcat/apache-tomcat-9.0.24.tar.gz 2.测试启动Tomcat进入tomcat的bin目录 1sh ./startup.sh 如果报错-bash: startup.sh: command not found 则chmod u+x *.sh]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>tomcat安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[02java环境]]></title>
    <url>%2Fblog%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F02java%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[0.删除系统预装jdk可以一条命令直接删除 1rpm -e --nodeps `rpm -qa | grep java` 1.解压tar包1tar -zxvf jdk-8u211-linux-x64.tar.gz 2.编辑java环境变量配置文件1vim /etc/profile 123456最底下加上export JAVA_HOME=/usr/soft/java/jdk1.8.0_221export JRE_HOME=$JAVA_HOME/jreexport CLASSPATH=.:$JAVA_LIB/tools.jar:$JAVA_LIB/dt.jarexport PATH=$JAVA_HOME/bin:$PATH保存退出 123source /etc/profile 使配置生效（可能会需要等一会儿才能生效）或. /etc/profile 如果报错 -bash: /user/java/jdk1.8.0_221/bin/java: Permission denied则 chmod 777 /user/java/jdk1.8.0_221/bin/java 3.查询java版本1java –version 4.运行jarjava -jar springboot-0.0.1-SNAPSHOT.jar 5.后台运行jarnohup java -jar springboot-0.0.1-SNAPSHOT.jar &amp;nohup java -jar springboot-0.0.1-SNAPSHOT.jar &gt; log.file 2&gt;&amp;1 &amp; 如果是访问云服务器的页面，可能需要配置安全规则 添加所有访问到本服务器的8080端口]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>Java安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01CentOS7操作系统的基础]]></title>
    <url>%2Fblog%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F01CentOS7%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[系统目录简介/ 根目录 bin (binaries)存放二进制可执行文件 sbin (super user binaries)存放二进制可执行文件，只有root才能访问 etc (etcetera)存放系统置文件 usr (unix shared resources)用于存放共享的系统资源home存放用户文件的根目录 root 超级用户目录 dev (devices)用于存放设备文件 lib (library)存放跟文件系统中的程序运行所需要的共享库及内核模块 mnt (mount)系统管理员安装临时文件系统的安装点 boot 存放用于系统引|导时使用的各种文件 tmp (tempor any)用于存放各种临时文件 var (variable)用于存放运行时需要改变数据的文件磁盘管理1.查看当前文件目录pwd 显示工作目录2.列出目录内容ls [参数][文件或目录] 缺省为ls -a ls -l 显示文件详细信息（简化命令为ll） ls -al 显示文件详细信息（包括隐藏文件） ls -a/all 显示文件名字（包括隐藏文件） ls -t 更改时间排序 ls -r 反向排序3.切换目录cd [目录] 缺省为cd ~ cd 目录名 进入指定文件夹（不存在则提示） cd ~ 当前用户目录 cd / 根目录 cd - 上次访问目录 cd .. 上一级目录4.创建目录mkdir [参数] 目录名（支持多级） mkdir -p 目录名 父目录不存在先生成父目录（parents） mkdir -v 目录名 显示执行过程5.删除目录rmdir 目录名 删除空目录文件管理文件浏览1.查看文件内容cat 文件 显示文件所有内容2.分页查看文件内容more 文件 分页显示文件内容进入后 回车 向下一行 空格 向下滚动一屏（ctrl+f） b 返回上一屏（ctrl+b） q 退出 3.分页查看文件内容增强版less [参数] 文件 less -m 文件名 百分比显示（相当于more） less -n 文件名 显示每行行数进入后 空格 前进一页（page down键） b 返回上一屏（page up键） d 前进半页 u 后退半页 回车 前进一行（方向键向下） y 后退一行（方向键向上） /字符串 向上搜索 ?字符串 向下搜索 v 进入vim编辑器 左右方向键 水平滚动条 q 退出 3.查看文件末尾（可用于查看log文件）tail 必要参数 [选择参数][文件] -行数 显示函数 -f 循环读取（ctrl+c取消） &amp; 后台运行文件操作1.复制文件或目录cp [参数] 源文件或目录 目标文件或目录 -r/--recursive 递归处理 指定目录的文件和子目录全部处理（复制目录必须带-r参数） -b 覆盖文件时备份旧文件2.移动或更名 文件或目录12mv [源文件或目录] [目标文件或目录]-f/--force 若目标文件或目录与现有文件或目录重复，则直接覆盖 3.删除 文件或目录123rm [-dfirv] [--help] [--version] [文件或目录]-f/--force 强制删除文件或目录-r/--recursive 递归处理 4.查找 文件或目录12find [目录] [参数]-name 指定字符串作为寻找文件或目录的范本文件 文档编辑1.基本操作vi或vim命令 12345vim 文件名 进入一般模式i/a/o 进入插入模式esc 从插入模式退到一般模式: 从一般模式进入命令行/末行模式:w/:wq/:q/:q! 末行模式命令：保存/保存并退出/退出/强制退出（还可以编辑环境 入寻找字符串 列出行号等） 2.常用命令插入 12 复制或粘贴 12 定位 12 删除 12 选择 12 3.管道命令| 位于回车键上面（shift+\） 1命令1|命令2 将命令1的输出内容作为命令2的输入内容 一般与grep使用 4.文本查找命令1234全局正则表达式输出grep [option] parrern [file] 搜索/过滤特定字符-i/--ignore-case 忽略大小写搭配管道命令使用 如：cat /root/install.log | grep -i control 在cat命令输出结果 过滤control 系统命令查看端口情况 netstat -anp 1.查看进程123ps [参数]-e/-a 显示所有程序-f 显示UID、PPIP、C与STIME 2.杀死进程123kill [参数] [程序] 删除执行中的程序或工资-l&lt;信息编号&gt; 列出全部的信息名称-9 pid号 强制终止 3.查看网络配置1ifconfig 4.测试网络12ping IP地址或域名ctrl+c退出ping 二进制软件包管理及配置（针对红帽系列）1.RPM包管理 RPM软件包的一个例子: sudo-1.7.2pl-5.el5.i386.rpm 其中包括软件名(sudo),版本号(1.7.2pl),发行号(5.el5),和硬件版本(i386)2.YUM包管理 应用yum的好处: 自动解决软件包依赖关系; 方便的软件包升级;wget 1.相关命令1.rpm包管理 12345678910111213141516171819rpm [参数] [软件]-a 查询所有套件-v 显示指令执行过程-h/--hash 套件安装时列出标记-q 询问模式-i/--install 套件名 安装指定套件-u/--upgrade 套件名 升级指定套件-e/--erase 套件名 删除指定套件--nodeps 不验证套件档的相互关联性挂载光盘:(?) mkdir /mnt/cdrom mount /dev/cdrom /mnt/cdrom常用：rpm -ivh 软件.rpm --安装rpm -Uvh 软件 --更新rpm -e --nodeps 软件 --强制删除rpm -qa --查看 2.yum包管理 123456yum list 软件包名 --软件包查询yum info 软件包名 --软件包信息yum install 软件 --安装yum remove 软件 --卸载yum check-update 软件 --检测升级yum update 软件包名 --升级 2.配置yum源1.备份配置文件 1mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 2.下载阿里云的Centos-7.repo文件 1wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.rep 123456789101112131415[serverid]#serverid是用于区别各个不同的repository（仓库;贮藏室），必须有一个独一无二的名称name=Some name for this server#name，是对repository的描述#$releasever 表示当前系统的发行版本，可以通过rpm -qi centos-release命令查看#$basearch 系统硬件架构(CPU指令集),使用命令arch得到baseurl=url://path/to/repository/#可以跟多个url 但baseurl只能有一个#url之后可以加上多个选项，如gpgcheck、exclude、failovermethod等gpgcheck=1#其中gpgcheck，exclude的含义和[main]部分相同，但只对此服务器起作用(main在/etc/yum.conf中)failovermethode=priority#failovermethode 有两个选项roundrobin和priority，意思分别是有多个url可供选择时，yum选择的次序，roundrobin是随机选择，如果连接失 败则使用下一个，依次循环，priority则根据url的次序从第一个开始。如果不指明，默认是roundrobin。 阿里巴巴 网易163 清华大学 123yum list #显示yum包yum clean all #清除yum缓存yum makecache #缓存本地yum仓库中的软件包信息 3.其他方式安装源代码包安装 123456789tar –xzvf 压缩包.tar.gz (解压解包)cd 解压后目录./configure –prefix=/usr/local/指定的安装路径 (配置)说明:--prefix参数用来指定安装目录,默认是安装在/usr/local/下 rpm包是在打包的时候作者已经做好了安装的路径,所以不用设置make (编译)说明:把文件生成可用执行和使用的文件make install (安装)说明:如果在安装过程中出现了错误,那么就把安装目录和解压缩后的文件夹删除就可用了.但是如果安装的是MYSQL这样的包,就需要把MYSQL的进程停掉,然后删除安装目录和解压缩后的文件夹就可以了 shell脚本安装 1234tar –xzvf 压缩包.tar.gzcd 解压后目录cat README./setup.sh 压缩和解压12345678tar 命令 压缩或解压-c 压缩（create 建立压缩文件的参数指令）-x 解压（extract 解开压缩文件的参数指令）-z 是否使用gzip压缩-v 是否显示压缩过程文件-f 文件名 使用档名常用压缩指令：tar zcvf 文件名常用解压指令：tar zxvf 文件名 关机和重启init 3 图形界面切换命令界面 init 5 命令界面切换图形界面 init 6 或 reboot系统重启 shutdown 关机 -h now（init0） halt文件权限12345678910111213141516171819202122232425262728293031323334chmod 变更文件或目录的权限chmod [参数] [&lt;权限范围&gt;&lt;符号&gt;&lt;权限代号&gt;] 文件或目录-r/--recursive 递归处理权限范围:u:user，拥有者g:group，所属群组o:other，其他用户a:all，全部的用户符号+添加权限-取消权限权限代号r:读取，数字代号&quot;4&quot;w:写入，数字代号&quot;2&quot;x:执行文件或进入目录，数字代号&quot;1&quot;-:不具任何权限，数字代号&quot;0&quot;eg:chmod u-rwx 文件或目录（拥有者所有权限）chmod o-r-- 文件或目录（其他用户只读）chmod 777 文件或目录（全部用户所有权限）chmod 755 文件或目录（拥有者所有权限 所属群组不可写入 其他用户不可写入）linux文件权限格式&lt;类型&gt;&lt;用户&gt;&lt;组&gt;&lt;其他用户&gt;-rwxrw-r---/rwx/rw-/r--1:文件类型 d目录 -普通文件 l链接文件2-4:拥有者权限5-7:所属组权限8-10:其他用户权限 网络配置1.VIM命令配置输入ip查询命名 ip addr 也可以输入 ifconfig（如果没有ifconfig命令 则需要安装net-tools）查看ip，但此命令会出现3个条目，centos的ip地址是ens33条目中的inet值 123456789101112131415161718vim /etc/sysconfig/network-scripts/ifcfg-ens33DEVICE=eth33 #网卡名称TYPE=Ethernet #网卡类型NM_CONTROLLED=yes #BOOTPROTO=dhcp #dhcp获得id 还有设为静态static 则需要设置以下#IPADDR=192.168.1.111 #静态ip地址#GATEWAY=192.168.1.2 #网关#PREFIX=24 #子网掩码#DNS1=192.168.1.2DEFROUTE=yes #IPV4_FAILURE_FATAL=yes #IPV6INIT=no #NAME=eth33 #PEERDNS=yes #PEERROUTES=yes #LAST_CONNECT=1528693814 #ONBOOT=yes #是否开始启动网卡 重启网卡服务 12service network restart（CentOS7 网络服务器版 配置静态可能需要重启电脑 不好说） 测试确认ping www.baidu.com 确认网络恢复正常 2.setup命令配置（CentOS7之前）1234567setup防火墙配置键盘配置网络配置——设备配置——第一块网卡——设置IP地址等信息系统服务（设置开机自启动服务）验证配置上下键选择 tab键切换焦点 回车确定 3.nmtui命令配置（CentOS7之后 用了这个不能设置静态IP 关了吧）修改主机名12vim /etc/sysconfig/network（重启生效）hostnamectl set-hostname 主机名（立即生效） 用户切换su - su - root 切换root用户 su 普通用户名 exit 退出到原先的用户查看当前用户当前登录系统的用户信息 whoami 或 who am iCentOS7查看和关闭防火墙iptables通过控制端口来控制服务，而firewall则是通过控制协议来控制端口 （只能开一个） ConterOS7.0以上默认使用的是firewall，ConterOS7.0以下默认使用的是iptables firewall（很麻烦）查看防火墙状态 123firewall-cmd --state（notrunning 未启动 / running 启动）或systemctl status firewalld（更详细） 停止firewall 1systemctl stop firewalld.service 禁止firewall开机启动 1systemctl disable firewalld.service 重启防火墙 1firewall-cmd --reload 开放端口（修改后需要重启防火墙方可生效） 1firewall-cmd --zone=public --add-port=8080/tcp --permanent 查看开放的端口 1firewall-cmd --list-ports 关闭端口 1firewall-cmd --zone=public --remove-port=8080/tcp --permanent 1234567891011121314151617181920212223242526272829303132firewall-cmd --state 查看状态（若关闭，则先开启systemctl start firewalld）firewall-cmd --list-ports 查看已开放的端口开启8000端口：firewall-cmd --zone=public(作用域) --add-port=8000/tcp(端口和访问类型) --permanent(永久生效)firewall-cmd --zone=public --add-port=1521/tcp --permanentfirewall-cmd --zone=public --add-port=3306/tcp --permanentfirewall-cmd --zone=public --add-port=50070/tcp --permanentfirewall-cmd --zone=public --add-port=8088/tcp --permanentfirewall-cmd --zone=public --add-port=19888/tcp --permanentfirewall-cmd --zone=public --add-port=9000/tcp --permanentfirewall-cmd --zone=public --add-port=9001/tcp --permanentfirewall-cmd --reload -重启防火墙firewall-cmd --list-ports 查看已开放的端口systemctl stop firewalld.service停止防火墙systemctl disable firewalld.service禁止防火墙开机启动关闭端口：firewall-cmd --zone= public --remove-port=8000/tcp --permanent iptables（比较简单）安装防火墙 1yum install iptables-services 开启防火墙 1systemctl start iptables.service 关闭防火墙 1systemctl stop iptables.service 查看防火墙状态 1systemctl status iptables.service 设置开机启动 1systemctl enable iptables.service 编辑防火墙文件 12345678910111213141516171819202122232425vim /etc/sysconfig/iptables:INPUT ACCEPT [0:0]:FORWARD ACCEPT[0:0]:OUTPUT ACCEPT[0:0]-A INPUT -m state--state RELATED,ESTABLISHED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -jACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 6379 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8081 -j ACCEPT-A INPUT -j REJECT--reject-with icmp-host-prohibited-A FORWARD -jREJECT --reject-with icmp-host-prohibitedCOMMIT22 ssh(默认开启)80 nginx3306 mysql6379 redis8080 tomcat8081 第二个tomcat保存 如果没有该文件 12345控制台使用iptables命令随便写一条防火墙规则iptables -A OUTPUT -j ACCEPTiptables -I INPUT -p tcp --dport 8080 -j ACCEPT或者service iptables save 重启防火墙使配置文件生效 1systemctl restart iptables.service 关闭selinux进入到/etc/selinux/config文件 12vim /etc/selinux/config将SELINUX=enforcing改为SELINUX=disabled 修改hosts文件vim /etc/hosts 配制免密登录的命令（HDFS集群用到）123456789ssh-keygen -t rsa 或 ssh-keygen（客户机上）三次回车此时/root/.ssh目录下id_rsa为私钥（客户机）id_rsa.pub为公钥（服务器）ssh-copy-id 192.168.1.111（ssh-copy-id root@主机名）输入密码 帮助文档man 命令名 更完整 help 命令名 简单叙述]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[00Linux安装的基础]]></title>
    <url>%2Fblog%2F2019%2F09%2F20%2F%E6%90%AD%E5%BB%BALinux%E6%9C%8D%E5%8A%A1%E5%99%A8%2F00Linux%E5%AE%89%E8%A3%85%E7%9A%84%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[0.检验文件完整性CentOS-7-x86_64-DVD-1810.iso sha256 文件 3213b2c34cecbb3bb817030c7f025396b658634c0cf9c4435fc0b52ec9644667 CentOS-7-x86_64-LiveGNOME-1810.iso 38d5d51d9d100fd73df031ffd6bd8b1297ce24660dc8c13a3b8b4534a4bd291c CentOS-7-x86_64-Minimal-1810.iso 6d44331cc4f6c506c7bbe9feb8468fad6c51a88ca1393ca6b8b486ea04bec3c1 CentOS-7-x86_64-DVD-1810.iso 87623c8ab590ad0866c5f5d86a2d7ed631c61d69f38acc42ce2c8ddec65ecea2 CentOS-7-x86_64-LiveKDE-1810.iso 918975cdf947e858c9a0c77d6b90a9a56d9977f3a4496a56437f46f46200cf71 CentOS-7-x86_64-Everything-1810.iso 19d94274ef856c4dfcacb2e7cfe4be73e442a71dd65cc3fb6e46db826040b56e CentOS-7-x86_64-NetInstall-1810.iso windows的cmd命令： 1234certutil -hashfile .\CentOS-7-x86_64-DVD-1810.iso SHA256SHA256 的 .\CentOS-7-x86_64-DVD-1810.iso 哈希:6d44331cc4f6c506c7bbe9feb8468fad6c51a88ca1393ca6b8b486ea04bec3c1CertUtil: -hashfile 命令成功完成。 文本比对：https://tool.lu/diff/ 1.选择语言中文——简体中文(中国) 2.安装信息摘要网络和主机名——打开以太网、修改主机名 时间和日期——亚洲、上海、修改为当前系统时间并打开网络时间（一般减八个小时） 安装源——自动检测的安装介质 软件选择——基础网页服务器——直接点完成 （开发学习选择开发及生成工作站，网页服务器选择基础网页服务器，普通用选择gnome界面版本即可，专家水平选择最小安装 特别干净 常用软件都没有） 安装位置——本地标准磁盘 3.配置root超级用户密码4.等待安装完成]]></content>
      <categories>
        <category>搭建Linux服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
</search>
